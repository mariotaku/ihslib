name: Build Test

on:
  push:
    # Don't run for tags
    tags-ignore:
      - '**'
    branches:
      - '**'
env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  test-linux:
    name: SDL2 ${{ matrix.sdl_target }} on Linux
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        sdl_target: [ '2.0.0', '2.0.5', '2.0.9', '2.0.14', '2.0.24' ]

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Run apt-get update
        shell: bash
        run: sudo apt-get -y -qq update

      - name: Install Dependencies
        shell: bash
        # apt-get update was implicitly called, so we don't have to call it here
        run: sudo apt-get -y -qq install libprotobuf-c-dev libmbedtls-dev libsdl2-dev --no-install-recommends --no-install-suggests

      - name: Create Build Environment
        # Some projects don't allow in-source building, so create a separate build directory
        # We'll use this as our working directory for all subsequent commands
        run: cmake -E make_directory ${{github.workspace}}/build

      - name: Configure CMake
        # Use a bash shell, so we can use the same syntax for environment variable
        # access regardless of the host operating system
        shell: bash
        working-directory: ${{github.workspace}}/build
        # Note the current convention is to use the -S and -B options here to specify source
        # and build directories, but this is only available with CMake 3.13 and higher.
        # The CMake binaries on the GitHub Actions machines are (as of this writing) 3.12
        run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DIHSLIB_SDL_TARGETVERSION=${{ matrix.sdl_target }} \
          -DIHSLIB_CODEGEN=OFF


      - name: Build
        shell: bash
        working-directory: ${{github.workspace}}/build
        run: cmake --build .

      - name: Test
        shell: bash
        working-directory: ${{github.workspace}}/build
        run: ctest
