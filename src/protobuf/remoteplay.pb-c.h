/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: protobuf/remoteplay.proto */

#ifndef PROTOBUF_C_protobuf_2fremoteplay_2eproto__INCLUDED
#define PROTOBUF_C_protobuf_2fremoteplay_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct CDiscoveryPingRequest CDiscoveryPingRequest;
typedef struct CDiscoveryPingResponse CDiscoveryPingResponse;
typedef struct CStreamingClientHandshakeInfo CStreamingClientHandshakeInfo;
typedef struct CClientHandshakeMsg CClientHandshakeMsg;
typedef struct CStreamingServerHandshakeInfo CStreamingServerHandshakeInfo;
typedef struct CServerHandshakeMsg CServerHandshakeMsg;
typedef struct CAuthenticationRequestMsg CAuthenticationRequestMsg;
typedef struct CAuthenticationResponseMsg CAuthenticationResponseMsg;
typedef struct CKeepAliveMsg CKeepAliveMsg;
typedef struct CStartNetworkTestMsg CStartNetworkTestMsg;
typedef struct CStreamVideoMode CStreamVideoMode;
typedef struct CStreamVideoLimit CStreamVideoLimit;
typedef struct CStreamingClientCaps CStreamingClientCaps;
typedef struct CStreamingClientConfig CStreamingClientConfig;
typedef struct CStreamingServerConfig CStreamingServerConfig;
typedef struct CNegotiatedConfig CNegotiatedConfig;
typedef struct CNegotiationInitMsg CNegotiationInitMsg;
typedef struct CNegotiationSetConfigMsg CNegotiationSetConfigMsg;
typedef struct CNegotiationCompleteMsg CNegotiationCompleteMsg;
typedef struct CStartAudioDataMsg CStartAudioDataMsg;
typedef struct CStopAudioDataMsg CStopAudioDataMsg;
typedef struct CStartVideoDataMsg CStartVideoDataMsg;
typedef struct CStopVideoDataMsg CStopVideoDataMsg;
typedef struct CStartNeptuneDataMsg CStartNeptuneDataMsg;
typedef struct CStopNeptuneDataMsg CStopNeptuneDataMsg;
typedef struct CRecordedInput CRecordedInput;
typedef struct CRecordedInputStream CRecordedInputStream;
typedef struct CInputLatencyTestMsg CInputLatencyTestMsg;
typedef struct CInputTouchFingerDownMsg CInputTouchFingerDownMsg;
typedef struct CInputTouchFingerMotionMsg CInputTouchFingerMotionMsg;
typedef struct CInputTouchFingerUpMsg CInputTouchFingerUpMsg;
typedef struct CInputMouseMotionMsg CInputMouseMotionMsg;
typedef struct CInputMouseWheelMsg CInputMouseWheelMsg;
typedef struct CInputMouseDownMsg CInputMouseDownMsg;
typedef struct CInputMouseUpMsg CInputMouseUpMsg;
typedef struct CInputKeyDownMsg CInputKeyDownMsg;
typedef struct CInputKeyUpMsg CInputKeyUpMsg;
typedef struct CInputTextMsg CInputTextMsg;
typedef struct CSetTitleMsg CSetTitleMsg;
typedef struct CSetCaptureSizeMsg CSetCaptureSizeMsg;
typedef struct CSetIconMsg CSetIconMsg;
typedef struct CSetFlashStateMsg CSetFlashStateMsg;
typedef struct CShowCursorMsg CShowCursorMsg;
typedef struct CHideCursorMsg CHideCursorMsg;
typedef struct CSetCursorMsg CSetCursorMsg;
typedef struct CGetCursorImageMsg CGetCursorImageMsg;
typedef struct CSetCursorImageMsg CSetCursorImageMsg;
typedef struct CSetCursorScaleMsg CSetCursorScaleMsg;
typedef struct CVideoDecoderInfoMsg CVideoDecoderInfoMsg;
typedef struct CVideoEncoderInfoMsg CVideoEncoderInfoMsg;
typedef struct CPauseMsg CPauseMsg;
typedef struct CResumeMsg CResumeMsg;
typedef struct CEnableHighResCaptureMsg CEnableHighResCaptureMsg;
typedef struct CDisableHighResCaptureMsg CDisableHighResCaptureMsg;
typedef struct CEnableNeptuneDataMsg CEnableNeptuneDataMsg;
typedef struct CDisableNeptuneDataMsg CDisableNeptuneDataMsg;
typedef struct CPauseControllerInputMsg CPauseControllerInputMsg;
typedef struct CResumeControllerInputMsg CResumeControllerInputMsg;
typedef struct CToggleMagnificationMsg CToggleMagnificationMsg;
typedef struct CSetCapslockMsg CSetCapslockMsg;
typedef struct CStreamingKeymapEntry CStreamingKeymapEntry;
typedef struct CStreamingKeymap CStreamingKeymap;
typedef struct CSetKeymapMsg CSetKeymapMsg;
typedef struct CStopRequest CStopRequest;
typedef struct CQuitRequest CQuitRequest;
typedef struct CDeleteCursorMsg CDeleteCursorMsg;
typedef struct CSetStreamingClientConfig CSetStreamingClientConfig;
typedef struct CSetQoSMsg CSetQoSMsg;
typedef struct CSetTargetFramerateMsg CSetTargetFramerateMsg;
typedef struct CSetTargetBitrateMsg CSetTargetBitrateMsg;
typedef struct COverlayEnabledMsg COverlayEnabledMsg;
typedef struct CSetGammaRampMsg CSetGammaRampMsg;
typedef struct CSetActivityMsg CSetActivityMsg;
typedef struct CSystemSuspendMsg CSystemSuspendMsg;
typedef struct CVirtualHereRequestMsg CVirtualHereRequestMsg;
typedef struct CVirtualHereReadyMsg CVirtualHereReadyMsg;
typedef struct CVirtualHereShareDeviceMsg CVirtualHereShareDeviceMsg;
typedef struct CSetSpectatorModeMsg CSetSpectatorModeMsg;
typedef struct CRemoteHIDMsg CRemoteHIDMsg;
typedef struct CTouchConfigActiveMsg CTouchConfigActiveMsg;
typedef struct CGetTouchConfigDataMsg CGetTouchConfigDataMsg;
typedef struct CSetTouchConfigDataMsg CSetTouchConfigDataMsg;
typedef struct CSaveTouchConfigLayoutMsg CSaveTouchConfigLayoutMsg;
typedef struct CTouchActionSetActiveMsg CTouchActionSetActiveMsg;
typedef struct CTouchActionSetLayerAddedMsg CTouchActionSetLayerAddedMsg;
typedef struct CTouchActionSetLayerRemovedMsg CTouchActionSetLayerRemovedMsg;
typedef struct CGetTouchIconDataMsg CGetTouchIconDataMsg;
typedef struct CSetTouchIconDataMsg CSetTouchIconDataMsg;
typedef struct CRemotePlayTogetherGroupUpdateMsg CRemotePlayTogetherGroupUpdateMsg;
typedef struct CRemotePlayTogetherGroupUpdateMsg__Player CRemotePlayTogetherGroupUpdateMsg__Player;
typedef struct CSetInputTemporarilyDisabledMsg CSetInputTemporarilyDisabledMsg;
typedef struct CSetQualityOverrideMsg CSetQualityOverrideMsg;
typedef struct CSetBitrateOverrideMsg CSetBitrateOverrideMsg;
typedef struct CShowOnScreenKeyboardMsg CShowOnScreenKeyboardMsg;
typedef struct CControllerPersonalizationUpdateMsg CControllerPersonalizationUpdateMsg;
typedef struct CVRConnectionReady CVRConnectionReady;
typedef struct CStreamDataLostMsg CStreamDataLostMsg;
typedef struct CAudioFormat CAudioFormat;
typedef struct CVideoFormat CVideoFormat;
typedef struct CFrameEvent CFrameEvent;
typedef struct CFrameStats CFrameStats;
typedef struct CFrameStatAccumulatedValue CFrameStatAccumulatedValue;
typedef struct CFrameStatsListMsg CFrameStatsListMsg;
typedef struct CStreamingSessionStats CStreamingSessionStats;
typedef struct CDebugDumpMsg CDebugDumpMsg;
typedef struct CLogMsg CLogMsg;
typedef struct CLogUploadMsg CLogUploadMsg;
typedef struct CTransportSignalMsg CTransportSignalMsg;
typedef struct CTransportSignalMsg__WebRTCMessage CTransportSignalMsg__WebRTCMessage;
typedef struct CTransportSignalMsg__WebRTCMessage__Candidate CTransportSignalMsg__WebRTCMessage__Candidate;
typedef struct CControllerConfigMsg CControllerConfigMsg;
typedef struct CControllerConfigMsg__ControllerConfigResponse CControllerConfigMsg__ControllerConfigResponse;
typedef struct CControllerConfigMsg__ControllerPersonalizationResponse CControllerConfigMsg__ControllerPersonalizationResponse;
typedef struct CControllerConfigMsg__ControllerActiveConfigChangeResponse CControllerConfigMsg__ControllerActiveConfigChangeResponse;
typedef struct CControllerConfigMsg__ControllerActiveConfigMsg CControllerConfigMsg__ControllerActiveConfigMsg;


/* --- enums --- */

typedef enum _CAuthenticationResponseMsg__AuthenticationResult {
  CAUTHENTICATION_RESPONSE_MSG__AUTHENTICATION_RESULT__SUCCEEDED = 0,
  CAUTHENTICATION_RESPONSE_MSG__AUTHENTICATION_RESULT__FAILED = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CAUTHENTICATION_RESPONSE_MSG__AUTHENTICATION_RESULT)
} CAuthenticationResponseMsg__AuthenticationResult;
typedef enum _EStreamChannel {
  k_EStreamChannelInvalid = -1,
  k_EStreamChannelDiscovery = 0,
  k_EStreamChannelControl = 1,
  k_EStreamChannelStats = 2,
  k_EStreamChannelDataChannelStart = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ESTREAM_CHANNEL)
} EStreamChannel;
typedef enum _EStreamDiscoveryMessage {
  k_EStreamDiscoveryPingRequest = 1,
  k_EStreamDiscoveryPingResponse = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ESTREAM_DISCOVERY_MESSAGE)
} EStreamDiscoveryMessage;
typedef enum _EStreamControlMessage {
  k_EStreamControlAuthenticationRequest = 1,
  k_EStreamControlAuthenticationResponse = 2,
  k_EStreamControlNegotiationInit = 3,
  k_EStreamControlNegotiationSetConfig = 4,
  k_EStreamControlNegotiationComplete = 5,
  k_EStreamControlClientHandshake = 6,
  k_EStreamControlServerHandshake = 7,
  k_EStreamControlStartNetworkTest = 8,
  k_EStreamControlKeepAlive = 9,
  k_EStreamControl_LAST_SETUP_MESSAGE = 15,
  k_EStreamControlStartAudioData = 50,
  k_EStreamControlStopAudioData = 51,
  k_EStreamControlStartVideoData = 52,
  k_EStreamControlStopVideoData = 53,
  k_EStreamControlInputMouseMotion = 54,
  k_EStreamControlInputMouseWheel = 55,
  k_EStreamControlInputMouseDown = 56,
  k_EStreamControlInputMouseUp = 57,
  k_EStreamControlInputKeyDown = 58,
  k_EStreamControlInputKeyUp = 59,
  k_EStreamControlInputGamepadAttached_OBSOLETE = 60,
  k_EStreamControlInputGamepadEvent_OBSOLETE = 61,
  k_EStreamControlInputGamepadDetached_OBSOLETE = 62,
  k_EStreamControlShowCursor = 63,
  k_EStreamControlHideCursor = 64,
  k_EStreamControlSetCursor = 65,
  k_EStreamControlGetCursorImage = 66,
  k_EStreamControlSetCursorImage = 67,
  k_EStreamControlDeleteCursor = 68,
  k_EStreamControlSetTargetFramerate = 69,
  k_EStreamControlInputLatencyTest = 70,
  k_EStreamControlGamepadRumble_OBSOLETE = 71,
  k_EStreamControlOverlayEnabled = 74,
  k_EStreamControlInputControllerAttached_OBSOLETE = 75,
  k_EStreamControlInputControllerState_OBSOLETE = 76,
  k_EStreamControlTriggerHapticPulse_OBSOLETE = 77,
  k_EStreamControlInputControllerDetached_OBSOLETE = 78,
  k_EStreamControlVideoDecoderInfo = 80,
  k_EStreamControlSetTitle = 81,
  k_EStreamControlSetIcon = 82,
  k_EStreamControlQuitRequest = 83,
  k_EStreamControlSetQoS = 87,
  k_EStreamControlInputControllerWirelessPresence_OBSOLETE = 88,
  k_EStreamControlSetGammaRamp = 89,
  k_EStreamControlVideoEncoderInfo = 90,
  k_EStreamControlInputControllerStateHID_OBSOLETE = 93,
  k_EStreamControlSetTargetBitrate = 94,
  k_EStreamControlSetControllerPairingEnabled_OBSOLETE = 95,
  k_EStreamControlSetControllerPairingResult_OBSOLETE = 96,
  k_EStreamControlTriggerControllerDisconnect_OBSOLETE = 97,
  k_EStreamControlSetActivity = 98,
  k_EStreamControlSetStreamingClientConfig = 99,
  k_EStreamControlSystemSuspend = 100,
  k_EStreamControlSetControllerSettings_OBSOLETE = 101,
  k_EStreamControlVirtualHereRequest = 102,
  k_EStreamControlVirtualHereReady = 103,
  k_EStreamControlVirtualHereShareDevice = 104,
  k_EStreamControlSetSpectatorMode = 105,
  k_EStreamControlRemoteHID = 106,
  k_EStreamControlStartMicrophoneData = 107,
  k_EStreamControlStopMicrophoneData = 108,
  k_EStreamControlInputText = 109,
  k_EStreamControlTouchConfigActive = 110,
  k_EStreamControlGetTouchConfigData = 111,
  k_EStreamControlSetTouchConfigData = 112,
  k_EStreamControlSaveTouchConfigLayout = 113,
  k_EStreamControlTouchActionSetActive = 114,
  k_EStreamControlGetTouchIconData = 115,
  k_EStreamControlSetTouchIconData = 116,
  k_EStreamControlInputTouchFingerDown = 117,
  k_EStreamControlInputTouchFingerMotion = 118,
  k_EStreamControlInputTouchFingerUp = 119,
  k_EStreamControlSetCaptureSize = 120,
  k_EStreamControlSetFlashState = 121,
  k_EStreamControlPause = 122,
  k_EStreamControlResume = 123,
  k_EStreamControlEnableHighResCapture = 124,
  k_EStreamControlDisableHighResCapture = 125,
  k_EStreamControlToggleMagnification = 126,
  k_EStreamControlSetCapslock = 127,
  k_EStreamControlSetKeymap = 128,
  k_EStreamControlStopRequest = 129,
  k_EStreamControlTouchActionSetLayerAdded = 130,
  k_EStreamControlTouchActionSetLayerRemoved = 131,
  k_EStreamControlRemotePlayTogetherGroupUpdate = 132,
  k_EStreamControlSetInputTemporarilyDisabled = 133,
  k_EStreamControlSetQualityOverride = 134,
  k_EStreamControlSetBitrateOverride = 135,
  k_EStreamControlShowOnScreenKeyboard = 136,
  k_EStreamControlControllerConfigMsg = 137,
  k_EStreamControlControllerPersonalizationUpdate = 138,
  k_EStreamControlEnableNeptuneData = 139,
  k_EStreamControlDisableNeptuneData = 140,
  k_EStreamControlStartNeptuneData = 141,
  k_EStreamControlStopNeptuneData = 142,
  k_EStreamControlPauseControllerInput = 143,
  k_EStreamControlResumeControllerInput = 144,
  k_EStreamControlVRConnectionReady = 145,
  k_EStreamControlSetCursorScale = 146
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ESTREAM_CONTROL_MESSAGE)
} EStreamControlMessage;
typedef enum _EStreamVersion {
  k_EStreamVersionNone = 0,
  k_EStreamVersionCurrent = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ESTREAM_VERSION)
} EStreamVersion;
typedef enum _EStreamAudioCodec {
  k_EStreamAudioCodecNone = 0,
  k_EStreamAudioCodecRaw = 1,
  k_EStreamAudioCodecVorbis = 2,
  k_EStreamAudioCodecOpus = 3,
  k_EStreamAudioCodecMP3 = 4,
  k_EStreamAudioCodecAAC = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ESTREAM_AUDIO_CODEC)
} EStreamAudioCodec;
typedef enum _EStreamVideoCodec {
  k_EStreamVideoCodecNone = 0,
  k_EStreamVideoCodecRaw = 1,
  k_EStreamVideoCodecVP8 = 2,
  k_EStreamVideoCodecVP9 = 3,
  k_EStreamVideoCodecH264 = 4,
  k_EStreamVideoCodecHEVC = 5,
  k_EStreamVideoCodecORBX1 = 6,
  k_EStreamVideoCodecORBX2 = 7
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ESTREAM_VIDEO_CODEC)
} EStreamVideoCodec;
typedef enum _EStreamQualityPreference {
  k_EStreamQualityAutomatic = -1,
  k_EStreamQualityFast = 1,
  k_EStreamQualityBalanced = 2,
  k_EStreamQualityBeautiful = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ESTREAM_QUALITY_PREFERENCE)
} EStreamQualityPreference;
typedef enum _EStreamBitrate {
  k_EStreamBitrateAutodetect = -1,
  k_EStreamBitrateUnlimited = 0
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ESTREAM_BITRATE)
} EStreamBitrate;
typedef enum _EStreamColorspace {
  k_EStreamColorspace_Unknown = 0,
  k_EStreamColorspace_BT601 = 1,
  k_EStreamColorspace_BT601_Full = 2,
  k_EStreamColorspace_BT709 = 3,
  k_EStreamColorspace_BT709_Full = 4,
  k_EStreamColorspace_BT2020 = 5,
  k_EStreamColorspace_BT2020_Full = 6
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ESTREAM_COLORSPACE)
} EStreamColorspace;
typedef enum _EStreamP2PScope {
  k_EStreamP2PScopeAutomatic = 0,
  k_EStreamP2PScopeDisabled = 1,
  k_EStreamP2PScopeOnlyMe = 2,
  k_EStreamP2PScopeFriends = 3,
  k_EStreamP2PScopeEveryone = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ESTREAM_P2_PSCOPE)
} EStreamP2PScope;
typedef enum _EStreamHostPlayAudioPreference {
  k_EStreamHostPlayAudioDefault = 0,
  k_EStreamHostPlayAudioAlways = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ESTREAM_HOST_PLAY_AUDIO_PREFERENCE)
} EStreamHostPlayAudioPreference;
typedef enum _EStreamingDataType {
  k_EStreamingAudioData = 0,
  k_EStreamingVideoData = 1,
  k_EStreamingMicrophoneData = 2,
  k_EStreamingNeptuneData = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ESTREAMING_DATA_TYPE)
} EStreamingDataType;
typedef enum _EStreamMouseButton {
  k_EStreamMouseButtonLeft = 1,
  k_EStreamMouseButtonRight = 2,
  k_EStreamMouseButtonMiddle = 16,
  k_EStreamMouseButtonX1 = 32,
  k_EStreamMouseButtonX2 = 64,
  k_EStreamMouseButtonUnknown = 4096
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ESTREAM_MOUSE_BUTTON)
} EStreamMouseButton;
typedef enum _EStreamMouseWheelDirection {
  k_EStreamMouseWheelUp = 120,
  k_EStreamMouseWheelDown = -120,
  k_EStreamMouseWheelLeft = 3,
  k_EStreamMouseWheelRight = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ESTREAM_MOUSE_WHEEL_DIRECTION)
} EStreamMouseWheelDirection;
typedef enum _EStreamFramerateLimiter {
  k_EStreamFramerateSlowCapture = 1,
  k_EStreamFramerateSlowConvert = 2,
  k_EStreamFramerateSlowEncode = 4,
  k_EStreamFramerateSlowNetwork = 8,
  k_EStreamFramerateSlowDecode = 16,
  k_EStreamFramerateSlowGame = 32,
  k_EStreamFramerateSlowDisplay = 64
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ESTREAM_FRAMERATE_LIMITER)
} EStreamFramerateLimiter;
typedef enum _EStreamActivity {
  k_EStreamActivityIdle = 1,
  k_EStreamActivityGame = 2,
  k_EStreamActivityDesktop = 3,
  k_EStreamActivitySecureDesktop = 4,
  k_EStreamActivityMusic = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ESTREAM_ACTIVITY)
} EStreamActivity;
typedef enum _EStreamDataMessage {
  k_EStreamDataPacket = 1,
  k_EStreamDataLost = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ESTREAM_DATA_MESSAGE)
} EStreamDataMessage;
typedef enum _EAudioFormat {
  k_EAudioFormatNone = 0,
  k_EAudioFormat16BitLittleEndian = 1,
  k_EAudioFormatFloat = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(EAUDIO_FORMAT)
} EAudioFormat;
typedef enum _EVideoFormat {
  k_EVideoFormatNone = 0,
  k_EVideoFormatYV12 = 1,
  k_EVideoFormatAccel = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(EVIDEO_FORMAT)
} EVideoFormat;
typedef enum _EStreamStatsMessage {
  k_EStreamStatsFrameEvents = 1,
  k_EStreamStatsDebugDump = 2,
  k_EStreamStatsLogMessage = 3,
  k_EStreamStatsLogUploadBegin = 4,
  k_EStreamStatsLogUploadData = 5,
  k_EStreamStatsLogUploadComplete = 6
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ESTREAM_STATS_MESSAGE)
} EStreamStatsMessage;
typedef enum _EStreamFrameEvent {
  k_EStreamInputEventStart = 0,
  k_EStreamInputEventSend = 1,
  k_EStreamInputEventRecv = 2,
  k_EStreamInputEventQueued = 3,
  k_EStreamInputEventHandled = 4,
  k_EStreamFrameEventStart = 5,
  k_EStreamFrameEventCaptureBegin = 6,
  k_EStreamFrameEventCaptureEnd = 7,
  k_EStreamFrameEventConvertBegin = 8,
  k_EStreamFrameEventConvertEnd = 9,
  k_EStreamFrameEventEncodeBegin = 10,
  k_EStreamFrameEventEncodeEnd = 11,
  k_EStreamFrameEventSend = 12,
  k_EStreamFrameEventRecv = 13,
  k_EStreamFrameEventDecodeBegin = 14,
  k_EStreamFrameEventDecodeEnd = 15,
  k_EStreamFrameEventUploadBegin = 16,
  k_EStreamFrameEventUploadEnd = 17,
  k_EStreamFrameEventComplete = 18
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ESTREAM_FRAME_EVENT)
} EStreamFrameEvent;
typedef enum _EStreamFrameResult {
  k_EStreamFrameResultPending = 0,
  k_EStreamFrameResultDisplayed = 1,
  k_EStreamFrameResultDroppedNetworkSlow = 2,
  k_EStreamFrameResultDroppedNetworkLost = 3,
  k_EStreamFrameResultDroppedDecodeSlow = 4,
  k_EStreamFrameResultDroppedDecodeCorrupt = 5,
  k_EStreamFrameResultDroppedLate = 6,
  k_EStreamFrameResultDroppedReset = 7
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ESTREAM_FRAME_RESULT)
} EStreamFrameResult;
typedef enum _EFrameAccumulatedStat {
  k_EFrameStatFPS = 0,
  k_EFrameStatCaptureDurationMS = 1,
  k_EFrameStatConvertDurationMS = 2,
  k_EFrameStatEncodeDurationMS = 3,
  k_EFrameStatSteamDurationMS = 4,
  k_EFrameStatServerDurationMS = 5,
  k_EFrameStatNetworkDurationMS = 6,
  k_EFrameStatDecodeDurationMS = 7,
  k_EFrameStatDisplayDurationMS = 8,
  k_EFrameStatClientDurationMS = 9,
  k_EFrameStatFrameDurationMS = 10,
  k_EFrameStatInputLatencyMS = 11,
  k_EFrameStatGameLatencyMS = 12,
  k_EFrameStatRoundTripLatencyMS = 13,
  k_EFrameStatPingTimeMS = 14,
  k_EFrameStatServerBitrateKbitPerSec = 15,
  k_EFrameStatClientBitrateKbitPerSec = 16,
  k_EFrameStatLinkBandwidthKbitPerSec = 17,
  k_EFrameStatPacketLossPercentage = 18
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(EFRAME_ACCUMULATED_STAT)
} EFrameAccumulatedStat;
typedef enum _ELogFileType {
  k_ELogFileSystemBoot = 0,
  k_ELogFileSystemReset = 1,
  k_ELogFileSystemDebug = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ELOG_FILE_TYPE)
} ELogFileType;
typedef enum _EStreamControllerConfigMsg {
  k_EStreamControllerConfigMsg_RequestConfigsForApp = 0,
  k_EStreamControllerConfigMsg_ConfigResponse = 1,
  k_EStreamControllerConfigMsg_PersonalizationResponse = 2,
  k_EStreamControllerConfigMsg_ActiveConfigChange = 3,
  k_EStreamControllerConfigMsg_RequestActiveConfig = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ESTREAM_CONTROLLER_CONFIG_MSG)
} EStreamControllerConfigMsg;

/* --- messages --- */

struct  CDiscoveryPingRequest
{
  ProtobufCMessage base;
  protobuf_c_boolean has_sequence;
  uint32_t sequence;
  protobuf_c_boolean has_packet_size_requested;
  uint32_t packet_size_requested;
};
#define CDISCOVERY_PING_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdiscovery_ping_request__descriptor) \
    , 0, 0, 0, 0 }


struct  CDiscoveryPingResponse
{
  ProtobufCMessage base;
  protobuf_c_boolean has_sequence;
  uint32_t sequence;
  protobuf_c_boolean has_packet_size_received;
  uint32_t packet_size_received;
};
#define CDISCOVERY_PING_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdiscovery_ping_response__descriptor) \
    , 0, 0, 0, 0 }


struct  CStreamingClientHandshakeInfo
{
  ProtobufCMessage base;
  protobuf_c_boolean has_network_test;
  int32_t network_test;
};
#define CSTREAMING_CLIENT_HANDSHAKE_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cstreaming_client_handshake_info__descriptor) \
    , 0, 0 }


struct  CClientHandshakeMsg
{
  ProtobufCMessage base;
  CStreamingClientHandshakeInfo *info;
};
#define CCLIENT_HANDSHAKE_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cclient_handshake_msg__descriptor) \
    , NULL }


struct  CStreamingServerHandshakeInfo
{
  ProtobufCMessage base;
  protobuf_c_boolean has_mtu;
  int32_t mtu;
};
#define CSTREAMING_SERVER_HANDSHAKE_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cstreaming_server_handshake_info__descriptor) \
    , 0, 0 }


struct  CServerHandshakeMsg
{
  ProtobufCMessage base;
  CStreamingServerHandshakeInfo *info;
};
#define CSERVER_HANDSHAKE_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cserver_handshake_msg__descriptor) \
    , NULL }


struct  CAuthenticationRequestMsg
{
  ProtobufCMessage base;
  protobuf_c_boolean has_token;
  ProtobufCBinaryData token;
  protobuf_c_boolean has_version;
  EStreamVersion version;
  protobuf_c_boolean has_steamid;
  uint64_t steamid;
};
#define CAUTHENTICATION_REQUEST_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cauthentication_request_msg__descriptor) \
    , 0, {0,NULL}, 0, k_EStreamVersionNone, 0, 0 }


struct  CAuthenticationResponseMsg
{
  ProtobufCMessage base;
  protobuf_c_boolean has_result;
  CAuthenticationResponseMsg__AuthenticationResult result;
  protobuf_c_boolean has_version;
  EStreamVersion version;
};
#define CAUTHENTICATION_RESPONSE_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cauthentication_response_msg__descriptor) \
    , 0, CAUTHENTICATION_RESPONSE_MSG__AUTHENTICATION_RESULT__SUCCEEDED, 0, k_EStreamVersionNone }


struct  CKeepAliveMsg
{
  ProtobufCMessage base;
};
#define CKEEP_ALIVE_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ckeep_alive_msg__descriptor) \
     }


struct  CStartNetworkTestMsg
{
  ProtobufCMessage base;
  protobuf_c_boolean has_frames;
  uint32_t frames;
  protobuf_c_boolean has_framerate;
  uint32_t framerate;
  protobuf_c_boolean has_bitrate_kbps;
  uint32_t bitrate_kbps;
  protobuf_c_boolean has_burst_bitrate_kbps;
  uint32_t burst_bitrate_kbps;
  protobuf_c_boolean has_bandwidth_test;
  protobuf_c_boolean bandwidth_test;
};
#define CSTART_NETWORK_TEST_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cstart_network_test_msg__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  CStreamVideoMode
{
  ProtobufCMessage base;
  uint32_t width;
  uint32_t height;
  protobuf_c_boolean has_refresh_rate;
  uint32_t refresh_rate;
  protobuf_c_boolean has_refresh_rate_numerator;
  uint32_t refresh_rate_numerator;
  protobuf_c_boolean has_refresh_rate_denominator;
  uint32_t refresh_rate_denominator;
};
#define CSTREAM_VIDEO_MODE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cstream_video_mode__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0 }


struct  CStreamVideoLimit
{
  ProtobufCMessage base;
  protobuf_c_boolean has_codec;
  EStreamVideoCodec codec;
  CStreamVideoMode *mode;
  protobuf_c_boolean has_bitrate_kbps;
  int32_t bitrate_kbps;
  protobuf_c_boolean has_burst_bitrate_kbps;
  int32_t burst_bitrate_kbps;
};
#define CSTREAM_VIDEO_LIMIT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cstream_video_limit__descriptor) \
    , 0, k_EStreamVideoCodecNone, NULL, 0, 0, 0, 0 }


struct  CStreamingClientCaps
{
  ProtobufCMessage base;
  char *system_info;
  protobuf_c_boolean has_system_can_suspend;
  protobuf_c_boolean system_can_suspend;
  protobuf_c_boolean has_maximum_decode_bitrate_kbps;
  int32_t maximum_decode_bitrate_kbps;
  protobuf_c_boolean has_maximum_burst_bitrate_kbps;
  int32_t maximum_burst_bitrate_kbps;
  protobuf_c_boolean has_supports_video_hevc;
  protobuf_c_boolean supports_video_hevc;
  protobuf_c_boolean has_disable_steam_store;
  protobuf_c_boolean disable_steam_store;
  protobuf_c_boolean has_disable_client_cursor;
  protobuf_c_boolean disable_client_cursor;
  protobuf_c_boolean has_disable_intel_hardware_encoding;
  protobuf_c_boolean disable_intel_hardware_encoding;
  protobuf_c_boolean has_disable_amd_hardware_encoding;
  protobuf_c_boolean disable_amd_hardware_encoding;
  protobuf_c_boolean has_disable_nvidia_hardware_encoding;
  protobuf_c_boolean disable_nvidia_hardware_encoding;
  protobuf_c_boolean has_form_factor;
  int32_t form_factor;
  protobuf_c_boolean has_has_on_screen_keyboard;
  protobuf_c_boolean has_on_screen_keyboard;
  size_t n_supported_colorspaces;
  EStreamColorspace *supported_colorspaces;
};
#define CSTREAMING_CLIENT_CAPS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cstreaming_client_caps__descriptor) \
    , NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,NULL }


struct  CStreamingClientConfig
{
  ProtobufCMessage base;
  protobuf_c_boolean has_quality;
  EStreamQualityPreference quality;
  protobuf_c_boolean has_desired_resolution_x;
  uint32_t desired_resolution_x;
  protobuf_c_boolean has_desired_resolution_y;
  uint32_t desired_resolution_y;
  protobuf_c_boolean has_desired_framerate_numerator;
  uint32_t desired_framerate_numerator;
  protobuf_c_boolean has_desired_framerate_denominator;
  uint32_t desired_framerate_denominator;
  protobuf_c_boolean has_desired_bitrate_kbps;
  int32_t desired_bitrate_kbps;
  protobuf_c_boolean has_enable_hardware_decoding;
  protobuf_c_boolean enable_hardware_decoding;
  protobuf_c_boolean has_enable_performance_overlay;
  protobuf_c_boolean enable_performance_overlay;
  protobuf_c_boolean has_enable_video_streaming;
  protobuf_c_boolean enable_video_streaming;
  protobuf_c_boolean has_enable_audio_streaming;
  protobuf_c_boolean enable_audio_streaming;
  protobuf_c_boolean has_enable_input_streaming;
  protobuf_c_boolean enable_input_streaming;
  protobuf_c_boolean has_audio_channels;
  int32_t audio_channels;
  protobuf_c_boolean has_enable_video_hevc;
  protobuf_c_boolean enable_video_hevc;
  protobuf_c_boolean has_enable_performance_icons;
  protobuf_c_boolean enable_performance_icons;
  protobuf_c_boolean has_enable_microphone_streaming;
  protobuf_c_boolean enable_microphone_streaming;
  char *controller_overlay_hotkey;
  protobuf_c_boolean has_enable_touch_controller_obsolete;
  protobuf_c_boolean enable_touch_controller_obsolete;
  protobuf_c_boolean has_p2p_scope;
  EStreamP2PScope p2p_scope;
  protobuf_c_boolean has_enable_audio_uncompressed;
  protobuf_c_boolean enable_audio_uncompressed;
  CStreamVideoLimit *display_limit;
  CStreamVideoLimit *quality_limit;
  CStreamVideoLimit *runtime_limit;
  size_t n_decoder_limit;
  CStreamVideoLimit **decoder_limit;
  protobuf_c_boolean has_enable_unreliable_fec;
  protobuf_c_boolean enable_unreliable_fec;
};
#define CSTREAMING_CLIENT_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cstreaming_client_config__descriptor) \
    , 0, k_EStreamQualityBalanced, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 2, 0, 0, 0, 1, 0, 0, NULL, 0, 0, 0, k_EStreamP2PScopeAutomatic, 0, 0, NULL, NULL, NULL, 0,NULL, 0, 0 }


struct  CStreamingServerConfig
{
  ProtobufCMessage base;
  protobuf_c_boolean has_change_desktop_resolution;
  protobuf_c_boolean change_desktop_resolution;
  protobuf_c_boolean has_dynamically_adjust_resolution;
  protobuf_c_boolean dynamically_adjust_resolution;
  protobuf_c_boolean has_enable_capture_nvfbc;
  protobuf_c_boolean enable_capture_nvfbc;
  protobuf_c_boolean has_enable_hardware_encoding_nvidia;
  protobuf_c_boolean enable_hardware_encoding_nvidia;
  protobuf_c_boolean has_enable_hardware_encoding_amd;
  protobuf_c_boolean enable_hardware_encoding_amd;
  protobuf_c_boolean has_enable_hardware_encoding_intel;
  protobuf_c_boolean enable_hardware_encoding_intel;
  protobuf_c_boolean has_software_encoding_threads;
  int32_t software_encoding_threads;
  protobuf_c_boolean has_enable_traffic_priority;
  protobuf_c_boolean enable_traffic_priority;
  protobuf_c_boolean has_host_play_audio;
  EStreamHostPlayAudioPreference host_play_audio;
};
#define CSTREAMING_SERVER_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cstreaming_server_config__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, k_EStreamHostPlayAudioDefault }


struct  CNegotiatedConfig
{
  ProtobufCMessage base;
  protobuf_c_boolean has_reliable_data;
  protobuf_c_boolean reliable_data;
  protobuf_c_boolean has_selected_audio_codec;
  EStreamAudioCodec selected_audio_codec;
  protobuf_c_boolean has_selected_video_codec;
  EStreamVideoCodec selected_video_codec;
  size_t n_available_video_modes_obsolete;
  CStreamVideoMode **available_video_modes_obsolete;
  protobuf_c_boolean has_enable_remote_hid;
  protobuf_c_boolean enable_remote_hid;
  protobuf_c_boolean has_enable_touch_input;
  protobuf_c_boolean enable_touch_input;
  protobuf_c_boolean has_disable_client_cursor;
  protobuf_c_boolean disable_client_cursor;
};
#define CNEGOTIATED_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cnegotiated_config__descriptor) \
    , 0, 0, 0, k_EStreamAudioCodecNone, 0, k_EStreamVideoCodecNone, 0,NULL, 0, 0, 0, 0, 0, 0 }


struct  CNegotiationInitMsg
{
  ProtobufCMessage base;
  protobuf_c_boolean has_reliable_data;
  protobuf_c_boolean reliable_data;
  size_t n_supported_audio_codecs;
  EStreamAudioCodec *supported_audio_codecs;
  size_t n_supported_video_codecs;
  EStreamVideoCodec *supported_video_codecs;
  protobuf_c_boolean has_supports_remote_hid;
  protobuf_c_boolean supports_remote_hid;
  protobuf_c_boolean has_supports_touch_input;
  protobuf_c_boolean supports_touch_input;
};
#define CNEGOTIATION_INIT_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cnegotiation_init_msg__descriptor) \
    , 0, 0, 0,NULL, 0,NULL, 0, 0, 0, 0 }


struct  CNegotiationSetConfigMsg
{
  ProtobufCMessage base;
  CNegotiatedConfig *config;
  CStreamingClientConfig *streaming_client_config;
  CStreamingClientCaps *streaming_client_caps;
};
#define CNEGOTIATION_SET_CONFIG_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cnegotiation_set_config_msg__descriptor) \
    , NULL, NULL, NULL }


struct  CNegotiationCompleteMsg
{
  ProtobufCMessage base;
};
#define CNEGOTIATION_COMPLETE_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cnegotiation_complete_msg__descriptor) \
     }


struct  CStartAudioDataMsg
{
  ProtobufCMessage base;
  uint32_t channel;
  protobuf_c_boolean has_codec;
  EStreamAudioCodec codec;
  protobuf_c_boolean has_codec_data;
  ProtobufCBinaryData codec_data;
  protobuf_c_boolean has_frequency;
  uint32_t frequency;
  protobuf_c_boolean has_channels;
  uint32_t channels;
};
#define CSTART_AUDIO_DATA_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cstart_audio_data_msg__descriptor) \
    , 0, 0, k_EStreamAudioCodecNone, 0, {0,NULL}, 0, 0, 0, 0 }


struct  CStopAudioDataMsg
{
  ProtobufCMessage base;
};
#define CSTOP_AUDIO_DATA_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cstop_audio_data_msg__descriptor) \
     }


struct  CStartVideoDataMsg
{
  ProtobufCMessage base;
  uint32_t channel;
  protobuf_c_boolean has_codec;
  EStreamVideoCodec codec;
  protobuf_c_boolean has_codec_data;
  ProtobufCBinaryData codec_data;
  protobuf_c_boolean has_width;
  uint32_t width;
  protobuf_c_boolean has_height;
  uint32_t height;
};
#define CSTART_VIDEO_DATA_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cstart_video_data_msg__descriptor) \
    , 0, 0, k_EStreamVideoCodecNone, 0, {0,NULL}, 0, 0, 0, 0 }


struct  CStopVideoDataMsg
{
  ProtobufCMessage base;
};
#define CSTOP_VIDEO_DATA_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cstop_video_data_msg__descriptor) \
     }


struct  CStartNeptuneDataMsg
{
  ProtobufCMessage base;
  uint32_t channel;
};
#define CSTART_NEPTUNE_DATA_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cstart_neptune_data_msg__descriptor) \
    , 0 }


struct  CStopNeptuneDataMsg
{
  ProtobufCMessage base;
};
#define CSTOP_NEPTUNE_DATA_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cstop_neptune_data_msg__descriptor) \
     }


typedef enum {
  CRECORDED_INPUT__DATA__NOT_SET = 0,
  CRECORDED_INPUT__DATA_FINGER_DOWN = 3,
  CRECORDED_INPUT__DATA_FINGER_MOTION = 4,
  CRECORDED_INPUT__DATA_FINGER_UP = 5,
  CRECORDED_INPUT__DATA_MOUSE_MOTION = 6,
  CRECORDED_INPUT__DATA_MOUSE_WHEEL = 7,
  CRECORDED_INPUT__DATA_MOUSE_DOWN = 8,
  CRECORDED_INPUT__DATA_MOUSE_UP = 9,
  CRECORDED_INPUT__DATA_KEY_DOWN = 10,
  CRECORDED_INPUT__DATA_KEY_UP = 11,
  CRECORDED_INPUT__DATA_TEXT = 12,
  CRECORDED_INPUT__DATA_HID = 13
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CRECORDED_INPUT__DATA__CASE)
} CRecordedInput__DataCase;

struct  CRecordedInput
{
  ProtobufCMessage base;
  protobuf_c_boolean has_type;
  EStreamControlMessage type;
  protobuf_c_boolean has_timestamp;
  uint32_t timestamp;
  CRecordedInput__DataCase data_case;
  union {
    CInputTouchFingerDownMsg *finger_down;
    CInputTouchFingerMotionMsg *finger_motion;
    CInputTouchFingerUpMsg *finger_up;
    CInputMouseMotionMsg *mouse_motion;
    CInputMouseWheelMsg *mouse_wheel;
    CInputMouseDownMsg *mouse_down;
    CInputMouseUpMsg *mouse_up;
    CInputKeyDownMsg *key_down;
    CInputKeyUpMsg *key_up;
    CInputTextMsg *text;
    CRemoteHIDMsg *hid;
  };
};
#define CRECORDED_INPUT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&crecorded_input__descriptor) \
    , 0, k_EStreamControlAuthenticationRequest, 0, 0, CRECORDED_INPUT__DATA__NOT_SET, {0} }


struct  CRecordedInputStream
{
  ProtobufCMessage base;
  size_t n_entries;
  CRecordedInput **entries;
};
#define CRECORDED_INPUT_STREAM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&crecorded_input_stream__descriptor) \
    , 0,NULL }


struct  CInputLatencyTestMsg
{
  ProtobufCMessage base;
  uint32_t input_mark;
  protobuf_c_boolean has_color;
  uint32_t color;
};
#define CINPUT_LATENCY_TEST_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cinput_latency_test_msg__descriptor) \
    , 0, 0, 0 }


struct  CInputTouchFingerDownMsg
{
  ProtobufCMessage base;
  protobuf_c_boolean has_input_mark;
  uint32_t input_mark;
  protobuf_c_boolean has_fingerid;
  uint64_t fingerid;
  protobuf_c_boolean has_x_normalized;
  float x_normalized;
  protobuf_c_boolean has_y_normalized;
  float y_normalized;
};
#define CINPUT_TOUCH_FINGER_DOWN_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cinput_touch_finger_down_msg__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0 }


struct  CInputTouchFingerMotionMsg
{
  ProtobufCMessage base;
  protobuf_c_boolean has_input_mark;
  uint32_t input_mark;
  protobuf_c_boolean has_fingerid;
  uint64_t fingerid;
  protobuf_c_boolean has_x_normalized;
  float x_normalized;
  protobuf_c_boolean has_y_normalized;
  float y_normalized;
};
#define CINPUT_TOUCH_FINGER_MOTION_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cinput_touch_finger_motion_msg__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0 }


struct  CInputTouchFingerUpMsg
{
  ProtobufCMessage base;
  protobuf_c_boolean has_input_mark;
  uint32_t input_mark;
  protobuf_c_boolean has_fingerid;
  uint64_t fingerid;
  protobuf_c_boolean has_x_normalized;
  float x_normalized;
  protobuf_c_boolean has_y_normalized;
  float y_normalized;
};
#define CINPUT_TOUCH_FINGER_UP_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cinput_touch_finger_up_msg__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0 }


struct  CInputMouseMotionMsg
{
  ProtobufCMessage base;
  protobuf_c_boolean has_input_mark;
  uint32_t input_mark;
  protobuf_c_boolean has_x_normalized;
  float x_normalized;
  protobuf_c_boolean has_y_normalized;
  float y_normalized;
  protobuf_c_boolean has_dx;
  int32_t dx;
  protobuf_c_boolean has_dy;
  int32_t dy;
};
#define CINPUT_MOUSE_MOTION_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cinput_mouse_motion_msg__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  CInputMouseWheelMsg
{
  ProtobufCMessage base;
  protobuf_c_boolean has_input_mark;
  uint32_t input_mark;
  EStreamMouseWheelDirection direction;
};
#define CINPUT_MOUSE_WHEEL_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cinput_mouse_wheel_msg__descriptor) \
    , 0, 0, k_EStreamMouseWheelUp }


struct  CInputMouseDownMsg
{
  ProtobufCMessage base;
  protobuf_c_boolean has_input_mark;
  uint32_t input_mark;
  EStreamMouseButton button;
};
#define CINPUT_MOUSE_DOWN_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cinput_mouse_down_msg__descriptor) \
    , 0, 0, k_EStreamMouseButtonLeft }


struct  CInputMouseUpMsg
{
  ProtobufCMessage base;
  protobuf_c_boolean has_input_mark;
  uint32_t input_mark;
  EStreamMouseButton button;
};
#define CINPUT_MOUSE_UP_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cinput_mouse_up_msg__descriptor) \
    , 0, 0, k_EStreamMouseButtonLeft }


struct  CInputKeyDownMsg
{
  ProtobufCMessage base;
  protobuf_c_boolean has_input_mark;
  uint32_t input_mark;
  uint32_t scancode;
};
#define CINPUT_KEY_DOWN_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cinput_key_down_msg__descriptor) \
    , 0, 0, 0 }


struct  CInputKeyUpMsg
{
  ProtobufCMessage base;
  protobuf_c_boolean has_input_mark;
  uint32_t input_mark;
  uint32_t scancode;
};
#define CINPUT_KEY_UP_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cinput_key_up_msg__descriptor) \
    , 0, 0, 0 }


struct  CInputTextMsg
{
  ProtobufCMessage base;
  protobuf_c_boolean has_input_mark;
  uint32_t input_mark;
  char *text_utf8;
};
#define CINPUT_TEXT_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cinput_text_msg__descriptor) \
    , 0, 0, NULL }


struct  CSetTitleMsg
{
  ProtobufCMessage base;
  char *text;
};
#define CSET_TITLE_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cset_title_msg__descriptor) \
    , NULL }


struct  CSetCaptureSizeMsg
{
  ProtobufCMessage base;
  protobuf_c_boolean has_width;
  int32_t width;
  protobuf_c_boolean has_height;
  int32_t height;
};
#define CSET_CAPTURE_SIZE_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cset_capture_size_msg__descriptor) \
    , 0, 0, 0, 0 }


struct  CSetIconMsg
{
  ProtobufCMessage base;
  protobuf_c_boolean has_width;
  int32_t width;
  protobuf_c_boolean has_height;
  int32_t height;
  protobuf_c_boolean has_image;
  ProtobufCBinaryData image;
};
#define CSET_ICON_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cset_icon_msg__descriptor) \
    , 0, 0, 0, 0, 0, {0,NULL} }


struct  CSetFlashStateMsg
{
  ProtobufCMessage base;
  protobuf_c_boolean has_flags;
  uint32_t flags;
  protobuf_c_boolean has_count;
  uint32_t count;
  protobuf_c_boolean has_timeout_ms;
  uint32_t timeout_ms;
};
#define CSET_FLASH_STATE_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cset_flash_state_msg__descriptor) \
    , 0, 0, 0, 0, 0, 0 }


struct  CShowCursorMsg
{
  ProtobufCMessage base;
  protobuf_c_boolean has_x_normalized;
  float x_normalized;
  protobuf_c_boolean has_y_normalized;
  float y_normalized;
};
#define CSHOW_CURSOR_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cshow_cursor_msg__descriptor) \
    , 0, 0, 0, 0 }


struct  CHideCursorMsg
{
  ProtobufCMessage base;
};
#define CHIDE_CURSOR_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&chide_cursor_msg__descriptor) \
     }


struct  CSetCursorMsg
{
  ProtobufCMessage base;
  uint64_t cursor_id;
};
#define CSET_CURSOR_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cset_cursor_msg__descriptor) \
    , 0 }


struct  CGetCursorImageMsg
{
  ProtobufCMessage base;
  uint64_t cursor_id;
};
#define CGET_CURSOR_IMAGE_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cget_cursor_image_msg__descriptor) \
    , 0 }


struct  CSetCursorImageMsg
{
  ProtobufCMessage base;
  uint64_t cursor_id;
  protobuf_c_boolean has_width;
  int32_t width;
  protobuf_c_boolean has_height;
  int32_t height;
  protobuf_c_boolean has_hot_x;
  int32_t hot_x;
  protobuf_c_boolean has_hot_y;
  int32_t hot_y;
  protobuf_c_boolean has_image;
  ProtobufCBinaryData image;
};
#define CSET_CURSOR_IMAGE_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cset_cursor_image_msg__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, {0,NULL} }


struct  CSetCursorScaleMsg
{
  ProtobufCMessage base;
  protobuf_c_boolean has_scale;
  float scale;
};
#define CSET_CURSOR_SCALE_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cset_cursor_scale_msg__descriptor) \
    , 0, 0 }


struct  CVideoDecoderInfoMsg
{
  ProtobufCMessage base;
  char *info;
  protobuf_c_boolean has_threads;
  int32_t threads;
};
#define CVIDEO_DECODER_INFO_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cvideo_decoder_info_msg__descriptor) \
    , NULL, 0, 0 }


struct  CVideoEncoderInfoMsg
{
  ProtobufCMessage base;
  char *info;
};
#define CVIDEO_ENCODER_INFO_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cvideo_encoder_info_msg__descriptor) \
    , NULL }


struct  CPauseMsg
{
  ProtobufCMessage base;
};
#define CPAUSE_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cpause_msg__descriptor) \
     }


struct  CResumeMsg
{
  ProtobufCMessage base;
};
#define CRESUME_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cresume_msg__descriptor) \
     }


struct  CEnableHighResCaptureMsg
{
  ProtobufCMessage base;
};
#define CENABLE_HIGH_RES_CAPTURE_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cenable_high_res_capture_msg__descriptor) \
     }


struct  CDisableHighResCaptureMsg
{
  ProtobufCMessage base;
};
#define CDISABLE_HIGH_RES_CAPTURE_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdisable_high_res_capture_msg__descriptor) \
     }


struct  CEnableNeptuneDataMsg
{
  ProtobufCMessage base;
};
#define CENABLE_NEPTUNE_DATA_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cenable_neptune_data_msg__descriptor) \
     }


struct  CDisableNeptuneDataMsg
{
  ProtobufCMessage base;
};
#define CDISABLE_NEPTUNE_DATA_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdisable_neptune_data_msg__descriptor) \
     }


struct  CPauseControllerInputMsg
{
  ProtobufCMessage base;
};
#define CPAUSE_CONTROLLER_INPUT_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cpause_controller_input_msg__descriptor) \
     }


struct  CResumeControllerInputMsg
{
  ProtobufCMessage base;
};
#define CRESUME_CONTROLLER_INPUT_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cresume_controller_input_msg__descriptor) \
     }


struct  CToggleMagnificationMsg
{
  ProtobufCMessage base;
};
#define CTOGGLE_MAGNIFICATION_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctoggle_magnification_msg__descriptor) \
     }


struct  CSetCapslockMsg
{
  ProtobufCMessage base;
  protobuf_c_boolean has_pressed;
  protobuf_c_boolean pressed;
};
#define CSET_CAPSLOCK_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cset_capslock_msg__descriptor) \
    , 0, 0 }


struct  CStreamingKeymapEntry
{
  ProtobufCMessage base;
  protobuf_c_boolean has_scancode;
  int32_t scancode;
  protobuf_c_boolean has_normal_keycode;
  int32_t normal_keycode;
  protobuf_c_boolean has_shift_keycode;
  int32_t shift_keycode;
  protobuf_c_boolean has_capslock_keycode;
  int32_t capslock_keycode;
  protobuf_c_boolean has_shift_capslock_keycode;
  int32_t shift_capslock_keycode;
  protobuf_c_boolean has_altgr_keycode;
  int32_t altgr_keycode;
  protobuf_c_boolean has_altgr_shift_keycode;
  int32_t altgr_shift_keycode;
  protobuf_c_boolean has_altgr_capslock_keycode;
  int32_t altgr_capslock_keycode;
  protobuf_c_boolean has_altgr_shift_capslock_keycode;
  int32_t altgr_shift_capslock_keycode;
};
#define CSTREAMING_KEYMAP_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cstreaming_keymap_entry__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  CStreamingKeymap
{
  ProtobufCMessage base;
  size_t n_entries;
  CStreamingKeymapEntry **entries;
};
#define CSTREAMING_KEYMAP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cstreaming_keymap__descriptor) \
    , 0,NULL }


struct  CSetKeymapMsg
{
  ProtobufCMessage base;
  CStreamingKeymap *keymap;
};
#define CSET_KEYMAP_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cset_keymap_msg__descriptor) \
    , NULL }


struct  CStopRequest
{
  ProtobufCMessage base;
};
#define CSTOP_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cstop_request__descriptor) \
     }


struct  CQuitRequest
{
  ProtobufCMessage base;
};
#define CQUIT_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cquit_request__descriptor) \
     }


struct  CDeleteCursorMsg
{
  ProtobufCMessage base;
  uint64_t cursor_id;
};
#define CDELETE_CURSOR_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdelete_cursor_msg__descriptor) \
    , 0 }


struct  CSetStreamingClientConfig
{
  ProtobufCMessage base;
  CStreamingClientConfig *config;
};
#define CSET_STREAMING_CLIENT_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cset_streaming_client_config__descriptor) \
    , NULL }


struct  CSetQoSMsg
{
  ProtobufCMessage base;
  protobuf_c_boolean use_qos;
};
#define CSET_QO_SMSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cset_qo_smsg__descriptor) \
    , 0 }


struct  CSetTargetFramerateMsg
{
  ProtobufCMessage base;
  uint32_t framerate;
  protobuf_c_boolean has_reasons;
  uint32_t reasons;
  protobuf_c_boolean has_framerate_numerator;
  uint32_t framerate_numerator;
  protobuf_c_boolean has_framerate_denominator;
  uint32_t framerate_denominator;
};
#define CSET_TARGET_FRAMERATE_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cset_target_framerate_msg__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0 }


struct  CSetTargetBitrateMsg
{
  ProtobufCMessage base;
  int32_t bitrate;
};
#define CSET_TARGET_BITRATE_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cset_target_bitrate_msg__descriptor) \
    , 0 }


struct  COverlayEnabledMsg
{
  ProtobufCMessage base;
  protobuf_c_boolean enabled;
};
#define COVERLAY_ENABLED_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&coverlay_enabled_msg__descriptor) \
    , 0 }


struct  CSetGammaRampMsg
{
  ProtobufCMessage base;
  protobuf_c_boolean has_gamma_ramp;
  ProtobufCBinaryData gamma_ramp;
};
#define CSET_GAMMA_RAMP_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cset_gamma_ramp_msg__descriptor) \
    , 0, {0,NULL} }


struct  CSetActivityMsg
{
  ProtobufCMessage base;
  protobuf_c_boolean has_activity;
  EStreamActivity activity;
  protobuf_c_boolean has_appid;
  uint32_t appid;
  protobuf_c_boolean has_gameid;
  uint64_t gameid;
  char *game_name;
};
#define CSET_ACTIVITY_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cset_activity_msg__descriptor) \
    , 0, k_EStreamActivityIdle, 0, 0, 0, 0, NULL }


struct  CSystemSuspendMsg
{
  ProtobufCMessage base;
};
#define CSYSTEM_SUSPEND_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&csystem_suspend_msg__descriptor) \
     }


struct  CVirtualHereRequestMsg
{
  ProtobufCMessage base;
  char *hostname;
};
#define CVIRTUAL_HERE_REQUEST_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cvirtual_here_request_msg__descriptor) \
    , NULL }


struct  CVirtualHereReadyMsg
{
  ProtobufCMessage base;
  protobuf_c_boolean has_licensed_device_count;
  uint32_t licensed_device_count;
};
#define CVIRTUAL_HERE_READY_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cvirtual_here_ready_msg__descriptor) \
    , 0, 0 }


struct  CVirtualHereShareDeviceMsg
{
  ProtobufCMessage base;
  char *device_address;
};
#define CVIRTUAL_HERE_SHARE_DEVICE_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cvirtual_here_share_device_msg__descriptor) \
    , NULL }


struct  CSetSpectatorModeMsg
{
  ProtobufCMessage base;
  protobuf_c_boolean has_enabled;
  protobuf_c_boolean enabled;
};
#define CSET_SPECTATOR_MODE_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cset_spectator_mode_msg__descriptor) \
    , 0, 0 }


struct  CRemoteHIDMsg
{
  ProtobufCMessage base;
  protobuf_c_boolean has_data;
  ProtobufCBinaryData data;
  protobuf_c_boolean has_active_input;
  protobuf_c_boolean active_input;
};
#define CREMOTE_HIDMSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cremote_hidmsg__descriptor) \
    , 0, {0,NULL}, 0, 0 }


struct  CTouchConfigActiveMsg
{
  ProtobufCMessage base;
  protobuf_c_boolean has_appid;
  uint32_t appid;
  protobuf_c_boolean has_revision;
  uint32_t revision;
  protobuf_c_boolean has_creator;
  uint64_t creator;
};
#define CTOUCH_CONFIG_ACTIVE_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctouch_config_active_msg__descriptor) \
    , 0, 0, 0, 0, 0, 0 }


struct  CGetTouchConfigDataMsg
{
  ProtobufCMessage base;
  protobuf_c_boolean has_appid;
  uint32_t appid;
};
#define CGET_TOUCH_CONFIG_DATA_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cget_touch_config_data_msg__descriptor) \
    , 0, 0 }


struct  CSetTouchConfigDataMsg
{
  ProtobufCMessage base;
  protobuf_c_boolean has_appid;
  uint32_t appid;
  protobuf_c_boolean has_revision;
  uint32_t revision;
  protobuf_c_boolean has_data;
  ProtobufCBinaryData data;
  protobuf_c_boolean has_layout;
  ProtobufCBinaryData layout;
  protobuf_c_boolean has_creator;
  uint64_t creator;
};
#define CSET_TOUCH_CONFIG_DATA_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cset_touch_config_data_msg__descriptor) \
    , 0, 0, 0, 0, 0, {0,NULL}, 0, {0,NULL}, 0, 0 }


struct  CSaveTouchConfigLayoutMsg
{
  ProtobufCMessage base;
  protobuf_c_boolean has_appid;
  uint32_t appid;
  protobuf_c_boolean has_layout;
  ProtobufCBinaryData layout;
};
#define CSAVE_TOUCH_CONFIG_LAYOUT_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&csave_touch_config_layout_msg__descriptor) \
    , 0, 0, 0, {0,NULL} }


struct  CTouchActionSetActiveMsg
{
  ProtobufCMessage base;
  protobuf_c_boolean has_appid;
  uint32_t appid;
  protobuf_c_boolean has_actionset_id;
  int32_t actionset_id;
};
#define CTOUCH_ACTION_SET_ACTIVE_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctouch_action_set_active_msg__descriptor) \
    , 0, 0, 0, 0 }


struct  CTouchActionSetLayerAddedMsg
{
  ProtobufCMessage base;
  protobuf_c_boolean has_appid;
  uint32_t appid;
  protobuf_c_boolean has_actionset_id;
  int32_t actionset_id;
};
#define CTOUCH_ACTION_SET_LAYER_ADDED_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctouch_action_set_layer_added_msg__descriptor) \
    , 0, 0, 0, 0 }


struct  CTouchActionSetLayerRemovedMsg
{
  ProtobufCMessage base;
  protobuf_c_boolean has_appid;
  uint32_t appid;
  protobuf_c_boolean has_actionset_id;
  int32_t actionset_id;
};
#define CTOUCH_ACTION_SET_LAYER_REMOVED_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctouch_action_set_layer_removed_msg__descriptor) \
    , 0, 0, 0, 0 }


struct  CGetTouchIconDataMsg
{
  ProtobufCMessage base;
  protobuf_c_boolean has_appid;
  uint32_t appid;
  char *icon;
};
#define CGET_TOUCH_ICON_DATA_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cget_touch_icon_data_msg__descriptor) \
    , 0, 0, NULL }


struct  CSetTouchIconDataMsg
{
  ProtobufCMessage base;
  protobuf_c_boolean has_appid;
  uint32_t appid;
  char *icon;
  protobuf_c_boolean has_data;
  ProtobufCBinaryData data;
};
#define CSET_TOUCH_ICON_DATA_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cset_touch_icon_data_msg__descriptor) \
    , 0, 0, NULL, 0, {0,NULL} }


struct  CRemotePlayTogetherGroupUpdateMsg__Player
{
  ProtobufCMessage base;
  protobuf_c_boolean has_accountid;
  uint32_t accountid;
  protobuf_c_boolean has_guestid;
  uint32_t guestid;
  protobuf_c_boolean has_keyboard_enabled;
  protobuf_c_boolean keyboard_enabled;
  protobuf_c_boolean has_mouse_enabled;
  protobuf_c_boolean mouse_enabled;
  protobuf_c_boolean has_controller_enabled;
  protobuf_c_boolean controller_enabled;
  size_t n_controller_slots;
  uint32_t *controller_slots;
  protobuf_c_boolean has_avatar_hash;
  ProtobufCBinaryData avatar_hash;
};
#define CREMOTE_PLAY_TOGETHER_GROUP_UPDATE_MSG__PLAYER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cremote_play_together_group_update_msg__player__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,NULL, 0, {0,NULL} }


struct  CRemotePlayTogetherGroupUpdateMsg
{
  ProtobufCMessage base;
  size_t n_players;
  CRemotePlayTogetherGroupUpdateMsg__Player **players;
  protobuf_c_boolean has_player_index;
  int32_t player_index;
  char *miniprofile_location;
  char *game_name;
  char *avatar_location;
};
#define CREMOTE_PLAY_TOGETHER_GROUP_UPDATE_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cremote_play_together_group_update_msg__descriptor) \
    , 0,NULL, 0, 0, NULL, NULL, NULL }


struct  CSetInputTemporarilyDisabledMsg
{
  ProtobufCMessage base;
  protobuf_c_boolean has_disabled;
  protobuf_c_boolean disabled;
};
#define CSET_INPUT_TEMPORARILY_DISABLED_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cset_input_temporarily_disabled_msg__descriptor) \
    , 0, 0 }


struct  CSetQualityOverrideMsg
{
  ProtobufCMessage base;
  protobuf_c_boolean has_value;
  int32_t value;
};
#define CSET_QUALITY_OVERRIDE_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cset_quality_override_msg__descriptor) \
    , 0, 0 }


struct  CSetBitrateOverrideMsg
{
  ProtobufCMessage base;
  protobuf_c_boolean has_value;
  int32_t value;
};
#define CSET_BITRATE_OVERRIDE_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cset_bitrate_override_msg__descriptor) \
    , 0, 0 }


struct  CShowOnScreenKeyboardMsg
{
  ProtobufCMessage base;
};
#define CSHOW_ON_SCREEN_KEYBOARD_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cshow_on_screen_keyboard_msg__descriptor) \
     }


struct  CControllerPersonalizationUpdateMsg
{
  ProtobufCMessage base;
  char *controller_path;
  char *controller_name;
  protobuf_c_boolean has_reverse_diamond_button_layout;
  protobuf_c_boolean reverse_diamond_button_layout;
};
#define CCONTROLLER_PERSONALIZATION_UPDATE_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ccontroller_personalization_update_msg__descriptor) \
    , NULL, NULL, 0, 0 }


struct  CVRConnectionReady
{
  ProtobufCMessage base;
  char *connect_params;
};
#define CVRCONNECTION_READY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cvrconnection_ready__descriptor) \
    , NULL }


struct  CStreamDataLostMsg
{
  ProtobufCMessage base;
  size_t n_packets;
  uint32_t *packets;
};
#define CSTREAM_DATA_LOST_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cstream_data_lost_msg__descriptor) \
    , 0,NULL }


struct  CAudioFormat
{
  ProtobufCMessage base;
  EAudioFormat format;
  protobuf_c_boolean has_frequency;
  uint32_t frequency;
  protobuf_c_boolean has_channels;
  uint32_t channels;
};
#define CAUDIO_FORMAT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&caudio_format__descriptor) \
    , k_EAudioFormatNone, 0, 0, 0, 0 }


struct  CVideoFormat
{
  ProtobufCMessage base;
  EVideoFormat format;
  protobuf_c_boolean has_width;
  uint32_t width;
  protobuf_c_boolean has_height;
  uint32_t height;
};
#define CVIDEO_FORMAT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cvideo_format__descriptor) \
    , k_EVideoFormatNone, 0, 0, 0, 0 }


struct  CFrameEvent
{
  ProtobufCMessage base;
  EStreamFrameEvent event_id;
  uint32_t timestamp;
};
#define CFRAME_EVENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cframe_event__descriptor) \
    , k_EStreamInputEventStart, 0 }


struct  CFrameStats
{
  ProtobufCMessage base;
  uint32_t frame_id;
  protobuf_c_boolean has_input_mark;
  uint32_t input_mark;
  size_t n_events;
  CFrameEvent **events;
  EStreamFrameResult result;
  protobuf_c_boolean has_frame_start_delta;
  float frame_start_delta;
  protobuf_c_boolean has_frame_display_delta;
  float frame_display_delta;
  protobuf_c_boolean has_ping_time;
  float ping_time;
  protobuf_c_boolean has_server_bitrate;
  float server_bitrate;
  protobuf_c_boolean has_client_bitrate;
  float client_bitrate;
  protobuf_c_boolean has_link_bandwidth;
  float link_bandwidth;
  protobuf_c_boolean has_packet_loss;
  float packet_loss;
  protobuf_c_boolean has_frame_size;
  uint32_t frame_size;
};
#define CFRAME_STATS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cframe_stats__descriptor) \
    , 0, 0, 0, 0,NULL, k_EStreamFrameResultPending, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  CFrameStatAccumulatedValue
{
  ProtobufCMessage base;
  EFrameAccumulatedStat stat_type;
  int32_t count;
  float average;
  protobuf_c_boolean has_stddev;
  float stddev;
};
#define CFRAME_STAT_ACCUMULATED_VALUE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cframe_stat_accumulated_value__descriptor) \
    , k_EFrameStatFPS, 0, 0, 0, 0 }


struct  CFrameStatsListMsg
{
  ProtobufCMessage base;
  EStreamingDataType data_type;
  size_t n_stats;
  CFrameStats **stats;
  size_t n_accumulated_stats;
  CFrameStatAccumulatedValue **accumulated_stats;
  int32_t latest_frame_id;
};
#define CFRAME_STATS_LIST_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cframe_stats_list_msg__descriptor) \
    , k_EStreamingAudioData, 0,NULL, 0,NULL, 0 }


struct  CStreamingSessionStats
{
  ProtobufCMessage base;
  protobuf_c_boolean has_frame_loss_percentage;
  float frame_loss_percentage;
  protobuf_c_boolean has_average_network_time_ms;
  float average_network_time_ms;
  protobuf_c_boolean has_stddev_network_time_ms;
  float stddev_network_time_ms;
  char *test_data;
};
#define CSTREAMING_SESSION_STATS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cstreaming_session_stats__descriptor) \
    , 0, 0, 0, 0, 0, 0, NULL }


struct  CDebugDumpMsg
{
  ProtobufCMessage base;
  protobuf_c_boolean has_screenshot;
  ProtobufCBinaryData screenshot;
};
#define CDEBUG_DUMP_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&cdebug_dump_msg__descriptor) \
    , 0, {0,NULL} }


struct  CLogMsg
{
  ProtobufCMessage base;
  protobuf_c_boolean has_type;
  int32_t type;
  char *message;
};
#define CLOG_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&clog_msg__descriptor) \
    , 0, 0, NULL }


struct  CLogUploadMsg
{
  ProtobufCMessage base;
  protobuf_c_boolean has_type;
  ELogFileType type;
  protobuf_c_boolean has_data;
  ProtobufCBinaryData data;
};
#define CLOG_UPLOAD_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&clog_upload_msg__descriptor) \
    , 0, k_ELogFileSystemBoot, 0, {0,NULL} }


struct  CTransportSignalMsg__WebRTCMessage__Candidate
{
  ProtobufCMessage base;
  char *sdp_mid;
  protobuf_c_boolean has_sdp_mline_index;
  int32_t sdp_mline_index;
  char *candidate;
};
#define CTRANSPORT_SIGNAL_MSG__WEB_RTCMESSAGE__CANDIDATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctransport_signal_msg__web_rtcmessage__candidate__descriptor) \
    , NULL, 0, 0, NULL }


typedef enum {
  CTRANSPORT_SIGNAL_MSG__WEB_RTCMESSAGE__MSG__NOT_SET = 0,
  CTRANSPORT_SIGNAL_MSG__WEB_RTCMESSAGE__MSG_GREETING = 1,
  CTRANSPORT_SIGNAL_MSG__WEB_RTCMESSAGE__MSG_OFFER = 2,
  CTRANSPORT_SIGNAL_MSG__WEB_RTCMESSAGE__MSG_ANSWER = 3,
  CTRANSPORT_SIGNAL_MSG__WEB_RTCMESSAGE__MSG_CANDIDATE = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CTRANSPORT_SIGNAL_MSG__WEB_RTCMESSAGE__MSG__CASE)
} CTransportSignalMsg__WebRTCMessage__MsgCase;

struct  CTransportSignalMsg__WebRTCMessage
{
  ProtobufCMessage base;
  CTransportSignalMsg__WebRTCMessage__MsgCase msg_case;
  union {
    protobuf_c_boolean greeting;
    char *offer;
    char *answer;
    CTransportSignalMsg__WebRTCMessage__Candidate *candidate;
  };
};
#define CTRANSPORT_SIGNAL_MSG__WEB_RTCMESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctransport_signal_msg__web_rtcmessage__descriptor) \
    , CTRANSPORT_SIGNAL_MSG__WEB_RTCMESSAGE__MSG__NOT_SET, {0} }


struct  CTransportSignalMsg
{
  ProtobufCMessage base;
  CTransportSignalMsg__WebRTCMessage *webrtc;
  size_t n_sdr;
  ProtobufCBinaryData *sdr;
};
#define CTRANSPORT_SIGNAL_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ctransport_signal_msg__descriptor) \
    , NULL, 0,NULL }


struct  CControllerConfigMsg__ControllerConfigResponse
{
  ProtobufCMessage base;
  protobuf_c_boolean has_appid;
  uint32_t appid;
  char *configurl;
  protobuf_c_boolean has_controllertype;
  uint32_t controllertype;
  char *controllerdata;
  protobuf_c_boolean has_selectionorder;
  uint32_t selectionorder;
  protobuf_c_boolean has_actionblock;
  protobuf_c_boolean actionblock;
};
#define CCONTROLLER_CONFIG_MSG__CONTROLLER_CONFIG_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ccontroller_config_msg__controller_config_response__descriptor) \
    , 0, 0, NULL, 0, 0, NULL, 0, 0, 0, 0 }


struct  CControllerConfigMsg__ControllerPersonalizationResponse
{
  ProtobufCMessage base;
  char *personalizationdata;
};
#define CCONTROLLER_CONFIG_MSG__CONTROLLER_PERSONALIZATION_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ccontroller_config_msg__controller_personalization_response__descriptor) \
    , NULL }


struct  CControllerConfigMsg__ControllerActiveConfigChangeResponse
{
  ProtobufCMessage base;
  char *configurl;
  protobuf_c_boolean has_controllertype;
  uint32_t controllertype;
  char *controllerdata;
  protobuf_c_boolean has_selectionorder;
  uint32_t selectionorder;
};
#define CCONTROLLER_CONFIG_MSG__CONTROLLER_ACTIVE_CONFIG_CHANGE_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ccontroller_config_msg__controller_active_config_change_response__descriptor) \
    , NULL, 0, 0, NULL, 0, 0 }


struct  CControllerConfigMsg__ControllerActiveConfigMsg
{
  ProtobufCMessage base;
  protobuf_c_boolean has_appid;
  uint32_t appid;
  char *configurl;
  protobuf_c_boolean has_controllertype;
  uint32_t controllertype;
  char *controllerdata;
};
#define CCONTROLLER_CONFIG_MSG__CONTROLLER_ACTIVE_CONFIG_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ccontroller_config_msg__controller_active_config_msg__descriptor) \
    , 0, 0, NULL, 0, 0, NULL }


struct  CControllerConfigMsg
{
  ProtobufCMessage base;
  EStreamControllerConfigMsg type;
  char *controllerpath;
  protobuf_c_boolean has_appid;
  uint32_t appid;
  CControllerConfigMsg__ControllerPersonalizationResponse *personalizationresponse;
  size_t n_configresponse;
  CControllerConfigMsg__ControllerConfigResponse **configresponse;
  CControllerConfigMsg__ControllerActiveConfigMsg *activeconfigchangemsg;
};
#define CCONTROLLER_CONFIG_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ccontroller_config_msg__descriptor) \
    , k_EStreamControllerConfigMsg_RequestConfigsForApp, NULL, 0, 0, NULL, 0,NULL, NULL }


/* CDiscoveryPingRequest methods */
void   cdiscovery_ping_request__init
                     (CDiscoveryPingRequest         *message);
size_t cdiscovery_ping_request__get_packed_size
                     (const CDiscoveryPingRequest   *message);
size_t cdiscovery_ping_request__pack
                     (const CDiscoveryPingRequest   *message,
                      uint8_t             *out);
size_t cdiscovery_ping_request__pack_to_buffer
                     (const CDiscoveryPingRequest   *message,
                      ProtobufCBuffer     *buffer);
CDiscoveryPingRequest *
       cdiscovery_ping_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdiscovery_ping_request__free_unpacked
                     (CDiscoveryPingRequest *message,
                      ProtobufCAllocator *allocator);
/* CDiscoveryPingResponse methods */
void   cdiscovery_ping_response__init
                     (CDiscoveryPingResponse         *message);
size_t cdiscovery_ping_response__get_packed_size
                     (const CDiscoveryPingResponse   *message);
size_t cdiscovery_ping_response__pack
                     (const CDiscoveryPingResponse   *message,
                      uint8_t             *out);
size_t cdiscovery_ping_response__pack_to_buffer
                     (const CDiscoveryPingResponse   *message,
                      ProtobufCBuffer     *buffer);
CDiscoveryPingResponse *
       cdiscovery_ping_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdiscovery_ping_response__free_unpacked
                     (CDiscoveryPingResponse *message,
                      ProtobufCAllocator *allocator);
/* CStreamingClientHandshakeInfo methods */
void   cstreaming_client_handshake_info__init
                     (CStreamingClientHandshakeInfo         *message);
size_t cstreaming_client_handshake_info__get_packed_size
                     (const CStreamingClientHandshakeInfo   *message);
size_t cstreaming_client_handshake_info__pack
                     (const CStreamingClientHandshakeInfo   *message,
                      uint8_t             *out);
size_t cstreaming_client_handshake_info__pack_to_buffer
                     (const CStreamingClientHandshakeInfo   *message,
                      ProtobufCBuffer     *buffer);
CStreamingClientHandshakeInfo *
       cstreaming_client_handshake_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cstreaming_client_handshake_info__free_unpacked
                     (CStreamingClientHandshakeInfo *message,
                      ProtobufCAllocator *allocator);
/* CClientHandshakeMsg methods */
void   cclient_handshake_msg__init
                     (CClientHandshakeMsg         *message);
size_t cclient_handshake_msg__get_packed_size
                     (const CClientHandshakeMsg   *message);
size_t cclient_handshake_msg__pack
                     (const CClientHandshakeMsg   *message,
                      uint8_t             *out);
size_t cclient_handshake_msg__pack_to_buffer
                     (const CClientHandshakeMsg   *message,
                      ProtobufCBuffer     *buffer);
CClientHandshakeMsg *
       cclient_handshake_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cclient_handshake_msg__free_unpacked
                     (CClientHandshakeMsg *message,
                      ProtobufCAllocator *allocator);
/* CStreamingServerHandshakeInfo methods */
void   cstreaming_server_handshake_info__init
                     (CStreamingServerHandshakeInfo         *message);
size_t cstreaming_server_handshake_info__get_packed_size
                     (const CStreamingServerHandshakeInfo   *message);
size_t cstreaming_server_handshake_info__pack
                     (const CStreamingServerHandshakeInfo   *message,
                      uint8_t             *out);
size_t cstreaming_server_handshake_info__pack_to_buffer
                     (const CStreamingServerHandshakeInfo   *message,
                      ProtobufCBuffer     *buffer);
CStreamingServerHandshakeInfo *
       cstreaming_server_handshake_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cstreaming_server_handshake_info__free_unpacked
                     (CStreamingServerHandshakeInfo *message,
                      ProtobufCAllocator *allocator);
/* CServerHandshakeMsg methods */
void   cserver_handshake_msg__init
                     (CServerHandshakeMsg         *message);
size_t cserver_handshake_msg__get_packed_size
                     (const CServerHandshakeMsg   *message);
size_t cserver_handshake_msg__pack
                     (const CServerHandshakeMsg   *message,
                      uint8_t             *out);
size_t cserver_handshake_msg__pack_to_buffer
                     (const CServerHandshakeMsg   *message,
                      ProtobufCBuffer     *buffer);
CServerHandshakeMsg *
       cserver_handshake_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cserver_handshake_msg__free_unpacked
                     (CServerHandshakeMsg *message,
                      ProtobufCAllocator *allocator);
/* CAuthenticationRequestMsg methods */
void   cauthentication_request_msg__init
                     (CAuthenticationRequestMsg         *message);
size_t cauthentication_request_msg__get_packed_size
                     (const CAuthenticationRequestMsg   *message);
size_t cauthentication_request_msg__pack
                     (const CAuthenticationRequestMsg   *message,
                      uint8_t             *out);
size_t cauthentication_request_msg__pack_to_buffer
                     (const CAuthenticationRequestMsg   *message,
                      ProtobufCBuffer     *buffer);
CAuthenticationRequestMsg *
       cauthentication_request_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cauthentication_request_msg__free_unpacked
                     (CAuthenticationRequestMsg *message,
                      ProtobufCAllocator *allocator);
/* CAuthenticationResponseMsg methods */
void   cauthentication_response_msg__init
                     (CAuthenticationResponseMsg         *message);
size_t cauthentication_response_msg__get_packed_size
                     (const CAuthenticationResponseMsg   *message);
size_t cauthentication_response_msg__pack
                     (const CAuthenticationResponseMsg   *message,
                      uint8_t             *out);
size_t cauthentication_response_msg__pack_to_buffer
                     (const CAuthenticationResponseMsg   *message,
                      ProtobufCBuffer     *buffer);
CAuthenticationResponseMsg *
       cauthentication_response_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cauthentication_response_msg__free_unpacked
                     (CAuthenticationResponseMsg *message,
                      ProtobufCAllocator *allocator);
/* CKeepAliveMsg methods */
void   ckeep_alive_msg__init
                     (CKeepAliveMsg         *message);
size_t ckeep_alive_msg__get_packed_size
                     (const CKeepAliveMsg   *message);
size_t ckeep_alive_msg__pack
                     (const CKeepAliveMsg   *message,
                      uint8_t             *out);
size_t ckeep_alive_msg__pack_to_buffer
                     (const CKeepAliveMsg   *message,
                      ProtobufCBuffer     *buffer);
CKeepAliveMsg *
       ckeep_alive_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ckeep_alive_msg__free_unpacked
                     (CKeepAliveMsg *message,
                      ProtobufCAllocator *allocator);
/* CStartNetworkTestMsg methods */
void   cstart_network_test_msg__init
                     (CStartNetworkTestMsg         *message);
size_t cstart_network_test_msg__get_packed_size
                     (const CStartNetworkTestMsg   *message);
size_t cstart_network_test_msg__pack
                     (const CStartNetworkTestMsg   *message,
                      uint8_t             *out);
size_t cstart_network_test_msg__pack_to_buffer
                     (const CStartNetworkTestMsg   *message,
                      ProtobufCBuffer     *buffer);
CStartNetworkTestMsg *
       cstart_network_test_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cstart_network_test_msg__free_unpacked
                     (CStartNetworkTestMsg *message,
                      ProtobufCAllocator *allocator);
/* CStreamVideoMode methods */
void   cstream_video_mode__init
                     (CStreamVideoMode         *message);
size_t cstream_video_mode__get_packed_size
                     (const CStreamVideoMode   *message);
size_t cstream_video_mode__pack
                     (const CStreamVideoMode   *message,
                      uint8_t             *out);
size_t cstream_video_mode__pack_to_buffer
                     (const CStreamVideoMode   *message,
                      ProtobufCBuffer     *buffer);
CStreamVideoMode *
       cstream_video_mode__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cstream_video_mode__free_unpacked
                     (CStreamVideoMode *message,
                      ProtobufCAllocator *allocator);
/* CStreamVideoLimit methods */
void   cstream_video_limit__init
                     (CStreamVideoLimit         *message);
size_t cstream_video_limit__get_packed_size
                     (const CStreamVideoLimit   *message);
size_t cstream_video_limit__pack
                     (const CStreamVideoLimit   *message,
                      uint8_t             *out);
size_t cstream_video_limit__pack_to_buffer
                     (const CStreamVideoLimit   *message,
                      ProtobufCBuffer     *buffer);
CStreamVideoLimit *
       cstream_video_limit__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cstream_video_limit__free_unpacked
                     (CStreamVideoLimit *message,
                      ProtobufCAllocator *allocator);
/* CStreamingClientCaps methods */
void   cstreaming_client_caps__init
                     (CStreamingClientCaps         *message);
size_t cstreaming_client_caps__get_packed_size
                     (const CStreamingClientCaps   *message);
size_t cstreaming_client_caps__pack
                     (const CStreamingClientCaps   *message,
                      uint8_t             *out);
size_t cstreaming_client_caps__pack_to_buffer
                     (const CStreamingClientCaps   *message,
                      ProtobufCBuffer     *buffer);
CStreamingClientCaps *
       cstreaming_client_caps__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cstreaming_client_caps__free_unpacked
                     (CStreamingClientCaps *message,
                      ProtobufCAllocator *allocator);
/* CStreamingClientConfig methods */
void   cstreaming_client_config__init
                     (CStreamingClientConfig         *message);
size_t cstreaming_client_config__get_packed_size
                     (const CStreamingClientConfig   *message);
size_t cstreaming_client_config__pack
                     (const CStreamingClientConfig   *message,
                      uint8_t             *out);
size_t cstreaming_client_config__pack_to_buffer
                     (const CStreamingClientConfig   *message,
                      ProtobufCBuffer     *buffer);
CStreamingClientConfig *
       cstreaming_client_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cstreaming_client_config__free_unpacked
                     (CStreamingClientConfig *message,
                      ProtobufCAllocator *allocator);
/* CStreamingServerConfig methods */
void   cstreaming_server_config__init
                     (CStreamingServerConfig         *message);
size_t cstreaming_server_config__get_packed_size
                     (const CStreamingServerConfig   *message);
size_t cstreaming_server_config__pack
                     (const CStreamingServerConfig   *message,
                      uint8_t             *out);
size_t cstreaming_server_config__pack_to_buffer
                     (const CStreamingServerConfig   *message,
                      ProtobufCBuffer     *buffer);
CStreamingServerConfig *
       cstreaming_server_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cstreaming_server_config__free_unpacked
                     (CStreamingServerConfig *message,
                      ProtobufCAllocator *allocator);
/* CNegotiatedConfig methods */
void   cnegotiated_config__init
                     (CNegotiatedConfig         *message);
size_t cnegotiated_config__get_packed_size
                     (const CNegotiatedConfig   *message);
size_t cnegotiated_config__pack
                     (const CNegotiatedConfig   *message,
                      uint8_t             *out);
size_t cnegotiated_config__pack_to_buffer
                     (const CNegotiatedConfig   *message,
                      ProtobufCBuffer     *buffer);
CNegotiatedConfig *
       cnegotiated_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cnegotiated_config__free_unpacked
                     (CNegotiatedConfig *message,
                      ProtobufCAllocator *allocator);
/* CNegotiationInitMsg methods */
void   cnegotiation_init_msg__init
                     (CNegotiationInitMsg         *message);
size_t cnegotiation_init_msg__get_packed_size
                     (const CNegotiationInitMsg   *message);
size_t cnegotiation_init_msg__pack
                     (const CNegotiationInitMsg   *message,
                      uint8_t             *out);
size_t cnegotiation_init_msg__pack_to_buffer
                     (const CNegotiationInitMsg   *message,
                      ProtobufCBuffer     *buffer);
CNegotiationInitMsg *
       cnegotiation_init_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cnegotiation_init_msg__free_unpacked
                     (CNegotiationInitMsg *message,
                      ProtobufCAllocator *allocator);
/* CNegotiationSetConfigMsg methods */
void   cnegotiation_set_config_msg__init
                     (CNegotiationSetConfigMsg         *message);
size_t cnegotiation_set_config_msg__get_packed_size
                     (const CNegotiationSetConfigMsg   *message);
size_t cnegotiation_set_config_msg__pack
                     (const CNegotiationSetConfigMsg   *message,
                      uint8_t             *out);
size_t cnegotiation_set_config_msg__pack_to_buffer
                     (const CNegotiationSetConfigMsg   *message,
                      ProtobufCBuffer     *buffer);
CNegotiationSetConfigMsg *
       cnegotiation_set_config_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cnegotiation_set_config_msg__free_unpacked
                     (CNegotiationSetConfigMsg *message,
                      ProtobufCAllocator *allocator);
/* CNegotiationCompleteMsg methods */
void   cnegotiation_complete_msg__init
                     (CNegotiationCompleteMsg         *message);
size_t cnegotiation_complete_msg__get_packed_size
                     (const CNegotiationCompleteMsg   *message);
size_t cnegotiation_complete_msg__pack
                     (const CNegotiationCompleteMsg   *message,
                      uint8_t             *out);
size_t cnegotiation_complete_msg__pack_to_buffer
                     (const CNegotiationCompleteMsg   *message,
                      ProtobufCBuffer     *buffer);
CNegotiationCompleteMsg *
       cnegotiation_complete_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cnegotiation_complete_msg__free_unpacked
                     (CNegotiationCompleteMsg *message,
                      ProtobufCAllocator *allocator);
/* CStartAudioDataMsg methods */
void   cstart_audio_data_msg__init
                     (CStartAudioDataMsg         *message);
size_t cstart_audio_data_msg__get_packed_size
                     (const CStartAudioDataMsg   *message);
size_t cstart_audio_data_msg__pack
                     (const CStartAudioDataMsg   *message,
                      uint8_t             *out);
size_t cstart_audio_data_msg__pack_to_buffer
                     (const CStartAudioDataMsg   *message,
                      ProtobufCBuffer     *buffer);
CStartAudioDataMsg *
       cstart_audio_data_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cstart_audio_data_msg__free_unpacked
                     (CStartAudioDataMsg *message,
                      ProtobufCAllocator *allocator);
/* CStopAudioDataMsg methods */
void   cstop_audio_data_msg__init
                     (CStopAudioDataMsg         *message);
size_t cstop_audio_data_msg__get_packed_size
                     (const CStopAudioDataMsg   *message);
size_t cstop_audio_data_msg__pack
                     (const CStopAudioDataMsg   *message,
                      uint8_t             *out);
size_t cstop_audio_data_msg__pack_to_buffer
                     (const CStopAudioDataMsg   *message,
                      ProtobufCBuffer     *buffer);
CStopAudioDataMsg *
       cstop_audio_data_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cstop_audio_data_msg__free_unpacked
                     (CStopAudioDataMsg *message,
                      ProtobufCAllocator *allocator);
/* CStartVideoDataMsg methods */
void   cstart_video_data_msg__init
                     (CStartVideoDataMsg         *message);
size_t cstart_video_data_msg__get_packed_size
                     (const CStartVideoDataMsg   *message);
size_t cstart_video_data_msg__pack
                     (const CStartVideoDataMsg   *message,
                      uint8_t             *out);
size_t cstart_video_data_msg__pack_to_buffer
                     (const CStartVideoDataMsg   *message,
                      ProtobufCBuffer     *buffer);
CStartVideoDataMsg *
       cstart_video_data_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cstart_video_data_msg__free_unpacked
                     (CStartVideoDataMsg *message,
                      ProtobufCAllocator *allocator);
/* CStopVideoDataMsg methods */
void   cstop_video_data_msg__init
                     (CStopVideoDataMsg         *message);
size_t cstop_video_data_msg__get_packed_size
                     (const CStopVideoDataMsg   *message);
size_t cstop_video_data_msg__pack
                     (const CStopVideoDataMsg   *message,
                      uint8_t             *out);
size_t cstop_video_data_msg__pack_to_buffer
                     (const CStopVideoDataMsg   *message,
                      ProtobufCBuffer     *buffer);
CStopVideoDataMsg *
       cstop_video_data_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cstop_video_data_msg__free_unpacked
                     (CStopVideoDataMsg *message,
                      ProtobufCAllocator *allocator);
/* CStartNeptuneDataMsg methods */
void   cstart_neptune_data_msg__init
                     (CStartNeptuneDataMsg         *message);
size_t cstart_neptune_data_msg__get_packed_size
                     (const CStartNeptuneDataMsg   *message);
size_t cstart_neptune_data_msg__pack
                     (const CStartNeptuneDataMsg   *message,
                      uint8_t             *out);
size_t cstart_neptune_data_msg__pack_to_buffer
                     (const CStartNeptuneDataMsg   *message,
                      ProtobufCBuffer     *buffer);
CStartNeptuneDataMsg *
       cstart_neptune_data_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cstart_neptune_data_msg__free_unpacked
                     (CStartNeptuneDataMsg *message,
                      ProtobufCAllocator *allocator);
/* CStopNeptuneDataMsg methods */
void   cstop_neptune_data_msg__init
                     (CStopNeptuneDataMsg         *message);
size_t cstop_neptune_data_msg__get_packed_size
                     (const CStopNeptuneDataMsg   *message);
size_t cstop_neptune_data_msg__pack
                     (const CStopNeptuneDataMsg   *message,
                      uint8_t             *out);
size_t cstop_neptune_data_msg__pack_to_buffer
                     (const CStopNeptuneDataMsg   *message,
                      ProtobufCBuffer     *buffer);
CStopNeptuneDataMsg *
       cstop_neptune_data_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cstop_neptune_data_msg__free_unpacked
                     (CStopNeptuneDataMsg *message,
                      ProtobufCAllocator *allocator);
/* CRecordedInput methods */
void   crecorded_input__init
                     (CRecordedInput         *message);
size_t crecorded_input__get_packed_size
                     (const CRecordedInput   *message);
size_t crecorded_input__pack
                     (const CRecordedInput   *message,
                      uint8_t             *out);
size_t crecorded_input__pack_to_buffer
                     (const CRecordedInput   *message,
                      ProtobufCBuffer     *buffer);
CRecordedInput *
       crecorded_input__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   crecorded_input__free_unpacked
                     (CRecordedInput *message,
                      ProtobufCAllocator *allocator);
/* CRecordedInputStream methods */
void   crecorded_input_stream__init
                     (CRecordedInputStream         *message);
size_t crecorded_input_stream__get_packed_size
                     (const CRecordedInputStream   *message);
size_t crecorded_input_stream__pack
                     (const CRecordedInputStream   *message,
                      uint8_t             *out);
size_t crecorded_input_stream__pack_to_buffer
                     (const CRecordedInputStream   *message,
                      ProtobufCBuffer     *buffer);
CRecordedInputStream *
       crecorded_input_stream__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   crecorded_input_stream__free_unpacked
                     (CRecordedInputStream *message,
                      ProtobufCAllocator *allocator);
/* CInputLatencyTestMsg methods */
void   cinput_latency_test_msg__init
                     (CInputLatencyTestMsg         *message);
size_t cinput_latency_test_msg__get_packed_size
                     (const CInputLatencyTestMsg   *message);
size_t cinput_latency_test_msg__pack
                     (const CInputLatencyTestMsg   *message,
                      uint8_t             *out);
size_t cinput_latency_test_msg__pack_to_buffer
                     (const CInputLatencyTestMsg   *message,
                      ProtobufCBuffer     *buffer);
CInputLatencyTestMsg *
       cinput_latency_test_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cinput_latency_test_msg__free_unpacked
                     (CInputLatencyTestMsg *message,
                      ProtobufCAllocator *allocator);
/* CInputTouchFingerDownMsg methods */
void   cinput_touch_finger_down_msg__init
                     (CInputTouchFingerDownMsg         *message);
size_t cinput_touch_finger_down_msg__get_packed_size
                     (const CInputTouchFingerDownMsg   *message);
size_t cinput_touch_finger_down_msg__pack
                     (const CInputTouchFingerDownMsg   *message,
                      uint8_t             *out);
size_t cinput_touch_finger_down_msg__pack_to_buffer
                     (const CInputTouchFingerDownMsg   *message,
                      ProtobufCBuffer     *buffer);
CInputTouchFingerDownMsg *
       cinput_touch_finger_down_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cinput_touch_finger_down_msg__free_unpacked
                     (CInputTouchFingerDownMsg *message,
                      ProtobufCAllocator *allocator);
/* CInputTouchFingerMotionMsg methods */
void   cinput_touch_finger_motion_msg__init
                     (CInputTouchFingerMotionMsg         *message);
size_t cinput_touch_finger_motion_msg__get_packed_size
                     (const CInputTouchFingerMotionMsg   *message);
size_t cinput_touch_finger_motion_msg__pack
                     (const CInputTouchFingerMotionMsg   *message,
                      uint8_t             *out);
size_t cinput_touch_finger_motion_msg__pack_to_buffer
                     (const CInputTouchFingerMotionMsg   *message,
                      ProtobufCBuffer     *buffer);
CInputTouchFingerMotionMsg *
       cinput_touch_finger_motion_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cinput_touch_finger_motion_msg__free_unpacked
                     (CInputTouchFingerMotionMsg *message,
                      ProtobufCAllocator *allocator);
/* CInputTouchFingerUpMsg methods */
void   cinput_touch_finger_up_msg__init
                     (CInputTouchFingerUpMsg         *message);
size_t cinput_touch_finger_up_msg__get_packed_size
                     (const CInputTouchFingerUpMsg   *message);
size_t cinput_touch_finger_up_msg__pack
                     (const CInputTouchFingerUpMsg   *message,
                      uint8_t             *out);
size_t cinput_touch_finger_up_msg__pack_to_buffer
                     (const CInputTouchFingerUpMsg   *message,
                      ProtobufCBuffer     *buffer);
CInputTouchFingerUpMsg *
       cinput_touch_finger_up_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cinput_touch_finger_up_msg__free_unpacked
                     (CInputTouchFingerUpMsg *message,
                      ProtobufCAllocator *allocator);
/* CInputMouseMotionMsg methods */
void   cinput_mouse_motion_msg__init
                     (CInputMouseMotionMsg         *message);
size_t cinput_mouse_motion_msg__get_packed_size
                     (const CInputMouseMotionMsg   *message);
size_t cinput_mouse_motion_msg__pack
                     (const CInputMouseMotionMsg   *message,
                      uint8_t             *out);
size_t cinput_mouse_motion_msg__pack_to_buffer
                     (const CInputMouseMotionMsg   *message,
                      ProtobufCBuffer     *buffer);
CInputMouseMotionMsg *
       cinput_mouse_motion_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cinput_mouse_motion_msg__free_unpacked
                     (CInputMouseMotionMsg *message,
                      ProtobufCAllocator *allocator);
/* CInputMouseWheelMsg methods */
void   cinput_mouse_wheel_msg__init
                     (CInputMouseWheelMsg         *message);
size_t cinput_mouse_wheel_msg__get_packed_size
                     (const CInputMouseWheelMsg   *message);
size_t cinput_mouse_wheel_msg__pack
                     (const CInputMouseWheelMsg   *message,
                      uint8_t             *out);
size_t cinput_mouse_wheel_msg__pack_to_buffer
                     (const CInputMouseWheelMsg   *message,
                      ProtobufCBuffer     *buffer);
CInputMouseWheelMsg *
       cinput_mouse_wheel_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cinput_mouse_wheel_msg__free_unpacked
                     (CInputMouseWheelMsg *message,
                      ProtobufCAllocator *allocator);
/* CInputMouseDownMsg methods */
void   cinput_mouse_down_msg__init
                     (CInputMouseDownMsg         *message);
size_t cinput_mouse_down_msg__get_packed_size
                     (const CInputMouseDownMsg   *message);
size_t cinput_mouse_down_msg__pack
                     (const CInputMouseDownMsg   *message,
                      uint8_t             *out);
size_t cinput_mouse_down_msg__pack_to_buffer
                     (const CInputMouseDownMsg   *message,
                      ProtobufCBuffer     *buffer);
CInputMouseDownMsg *
       cinput_mouse_down_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cinput_mouse_down_msg__free_unpacked
                     (CInputMouseDownMsg *message,
                      ProtobufCAllocator *allocator);
/* CInputMouseUpMsg methods */
void   cinput_mouse_up_msg__init
                     (CInputMouseUpMsg         *message);
size_t cinput_mouse_up_msg__get_packed_size
                     (const CInputMouseUpMsg   *message);
size_t cinput_mouse_up_msg__pack
                     (const CInputMouseUpMsg   *message,
                      uint8_t             *out);
size_t cinput_mouse_up_msg__pack_to_buffer
                     (const CInputMouseUpMsg   *message,
                      ProtobufCBuffer     *buffer);
CInputMouseUpMsg *
       cinput_mouse_up_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cinput_mouse_up_msg__free_unpacked
                     (CInputMouseUpMsg *message,
                      ProtobufCAllocator *allocator);
/* CInputKeyDownMsg methods */
void   cinput_key_down_msg__init
                     (CInputKeyDownMsg         *message);
size_t cinput_key_down_msg__get_packed_size
                     (const CInputKeyDownMsg   *message);
size_t cinput_key_down_msg__pack
                     (const CInputKeyDownMsg   *message,
                      uint8_t             *out);
size_t cinput_key_down_msg__pack_to_buffer
                     (const CInputKeyDownMsg   *message,
                      ProtobufCBuffer     *buffer);
CInputKeyDownMsg *
       cinput_key_down_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cinput_key_down_msg__free_unpacked
                     (CInputKeyDownMsg *message,
                      ProtobufCAllocator *allocator);
/* CInputKeyUpMsg methods */
void   cinput_key_up_msg__init
                     (CInputKeyUpMsg         *message);
size_t cinput_key_up_msg__get_packed_size
                     (const CInputKeyUpMsg   *message);
size_t cinput_key_up_msg__pack
                     (const CInputKeyUpMsg   *message,
                      uint8_t             *out);
size_t cinput_key_up_msg__pack_to_buffer
                     (const CInputKeyUpMsg   *message,
                      ProtobufCBuffer     *buffer);
CInputKeyUpMsg *
       cinput_key_up_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cinput_key_up_msg__free_unpacked
                     (CInputKeyUpMsg *message,
                      ProtobufCAllocator *allocator);
/* CInputTextMsg methods */
void   cinput_text_msg__init
                     (CInputTextMsg         *message);
size_t cinput_text_msg__get_packed_size
                     (const CInputTextMsg   *message);
size_t cinput_text_msg__pack
                     (const CInputTextMsg   *message,
                      uint8_t             *out);
size_t cinput_text_msg__pack_to_buffer
                     (const CInputTextMsg   *message,
                      ProtobufCBuffer     *buffer);
CInputTextMsg *
       cinput_text_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cinput_text_msg__free_unpacked
                     (CInputTextMsg *message,
                      ProtobufCAllocator *allocator);
/* CSetTitleMsg methods */
void   cset_title_msg__init
                     (CSetTitleMsg         *message);
size_t cset_title_msg__get_packed_size
                     (const CSetTitleMsg   *message);
size_t cset_title_msg__pack
                     (const CSetTitleMsg   *message,
                      uint8_t             *out);
size_t cset_title_msg__pack_to_buffer
                     (const CSetTitleMsg   *message,
                      ProtobufCBuffer     *buffer);
CSetTitleMsg *
       cset_title_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cset_title_msg__free_unpacked
                     (CSetTitleMsg *message,
                      ProtobufCAllocator *allocator);
/* CSetCaptureSizeMsg methods */
void   cset_capture_size_msg__init
                     (CSetCaptureSizeMsg         *message);
size_t cset_capture_size_msg__get_packed_size
                     (const CSetCaptureSizeMsg   *message);
size_t cset_capture_size_msg__pack
                     (const CSetCaptureSizeMsg   *message,
                      uint8_t             *out);
size_t cset_capture_size_msg__pack_to_buffer
                     (const CSetCaptureSizeMsg   *message,
                      ProtobufCBuffer     *buffer);
CSetCaptureSizeMsg *
       cset_capture_size_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cset_capture_size_msg__free_unpacked
                     (CSetCaptureSizeMsg *message,
                      ProtobufCAllocator *allocator);
/* CSetIconMsg methods */
void   cset_icon_msg__init
                     (CSetIconMsg         *message);
size_t cset_icon_msg__get_packed_size
                     (const CSetIconMsg   *message);
size_t cset_icon_msg__pack
                     (const CSetIconMsg   *message,
                      uint8_t             *out);
size_t cset_icon_msg__pack_to_buffer
                     (const CSetIconMsg   *message,
                      ProtobufCBuffer     *buffer);
CSetIconMsg *
       cset_icon_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cset_icon_msg__free_unpacked
                     (CSetIconMsg *message,
                      ProtobufCAllocator *allocator);
/* CSetFlashStateMsg methods */
void   cset_flash_state_msg__init
                     (CSetFlashStateMsg         *message);
size_t cset_flash_state_msg__get_packed_size
                     (const CSetFlashStateMsg   *message);
size_t cset_flash_state_msg__pack
                     (const CSetFlashStateMsg   *message,
                      uint8_t             *out);
size_t cset_flash_state_msg__pack_to_buffer
                     (const CSetFlashStateMsg   *message,
                      ProtobufCBuffer     *buffer);
CSetFlashStateMsg *
       cset_flash_state_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cset_flash_state_msg__free_unpacked
                     (CSetFlashStateMsg *message,
                      ProtobufCAllocator *allocator);
/* CShowCursorMsg methods */
void   cshow_cursor_msg__init
                     (CShowCursorMsg         *message);
size_t cshow_cursor_msg__get_packed_size
                     (const CShowCursorMsg   *message);
size_t cshow_cursor_msg__pack
                     (const CShowCursorMsg   *message,
                      uint8_t             *out);
size_t cshow_cursor_msg__pack_to_buffer
                     (const CShowCursorMsg   *message,
                      ProtobufCBuffer     *buffer);
CShowCursorMsg *
       cshow_cursor_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cshow_cursor_msg__free_unpacked
                     (CShowCursorMsg *message,
                      ProtobufCAllocator *allocator);
/* CHideCursorMsg methods */
void   chide_cursor_msg__init
                     (CHideCursorMsg         *message);
size_t chide_cursor_msg__get_packed_size
                     (const CHideCursorMsg   *message);
size_t chide_cursor_msg__pack
                     (const CHideCursorMsg   *message,
                      uint8_t             *out);
size_t chide_cursor_msg__pack_to_buffer
                     (const CHideCursorMsg   *message,
                      ProtobufCBuffer     *buffer);
CHideCursorMsg *
       chide_cursor_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   chide_cursor_msg__free_unpacked
                     (CHideCursorMsg *message,
                      ProtobufCAllocator *allocator);
/* CSetCursorMsg methods */
void   cset_cursor_msg__init
                     (CSetCursorMsg         *message);
size_t cset_cursor_msg__get_packed_size
                     (const CSetCursorMsg   *message);
size_t cset_cursor_msg__pack
                     (const CSetCursorMsg   *message,
                      uint8_t             *out);
size_t cset_cursor_msg__pack_to_buffer
                     (const CSetCursorMsg   *message,
                      ProtobufCBuffer     *buffer);
CSetCursorMsg *
       cset_cursor_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cset_cursor_msg__free_unpacked
                     (CSetCursorMsg *message,
                      ProtobufCAllocator *allocator);
/* CGetCursorImageMsg methods */
void   cget_cursor_image_msg__init
                     (CGetCursorImageMsg         *message);
size_t cget_cursor_image_msg__get_packed_size
                     (const CGetCursorImageMsg   *message);
size_t cget_cursor_image_msg__pack
                     (const CGetCursorImageMsg   *message,
                      uint8_t             *out);
size_t cget_cursor_image_msg__pack_to_buffer
                     (const CGetCursorImageMsg   *message,
                      ProtobufCBuffer     *buffer);
CGetCursorImageMsg *
       cget_cursor_image_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cget_cursor_image_msg__free_unpacked
                     (CGetCursorImageMsg *message,
                      ProtobufCAllocator *allocator);
/* CSetCursorImageMsg methods */
void   cset_cursor_image_msg__init
                     (CSetCursorImageMsg         *message);
size_t cset_cursor_image_msg__get_packed_size
                     (const CSetCursorImageMsg   *message);
size_t cset_cursor_image_msg__pack
                     (const CSetCursorImageMsg   *message,
                      uint8_t             *out);
size_t cset_cursor_image_msg__pack_to_buffer
                     (const CSetCursorImageMsg   *message,
                      ProtobufCBuffer     *buffer);
CSetCursorImageMsg *
       cset_cursor_image_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cset_cursor_image_msg__free_unpacked
                     (CSetCursorImageMsg *message,
                      ProtobufCAllocator *allocator);
/* CSetCursorScaleMsg methods */
void   cset_cursor_scale_msg__init
                     (CSetCursorScaleMsg         *message);
size_t cset_cursor_scale_msg__get_packed_size
                     (const CSetCursorScaleMsg   *message);
size_t cset_cursor_scale_msg__pack
                     (const CSetCursorScaleMsg   *message,
                      uint8_t             *out);
size_t cset_cursor_scale_msg__pack_to_buffer
                     (const CSetCursorScaleMsg   *message,
                      ProtobufCBuffer     *buffer);
CSetCursorScaleMsg *
       cset_cursor_scale_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cset_cursor_scale_msg__free_unpacked
                     (CSetCursorScaleMsg *message,
                      ProtobufCAllocator *allocator);
/* CVideoDecoderInfoMsg methods */
void   cvideo_decoder_info_msg__init
                     (CVideoDecoderInfoMsg         *message);
size_t cvideo_decoder_info_msg__get_packed_size
                     (const CVideoDecoderInfoMsg   *message);
size_t cvideo_decoder_info_msg__pack
                     (const CVideoDecoderInfoMsg   *message,
                      uint8_t             *out);
size_t cvideo_decoder_info_msg__pack_to_buffer
                     (const CVideoDecoderInfoMsg   *message,
                      ProtobufCBuffer     *buffer);
CVideoDecoderInfoMsg *
       cvideo_decoder_info_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cvideo_decoder_info_msg__free_unpacked
                     (CVideoDecoderInfoMsg *message,
                      ProtobufCAllocator *allocator);
/* CVideoEncoderInfoMsg methods */
void   cvideo_encoder_info_msg__init
                     (CVideoEncoderInfoMsg         *message);
size_t cvideo_encoder_info_msg__get_packed_size
                     (const CVideoEncoderInfoMsg   *message);
size_t cvideo_encoder_info_msg__pack
                     (const CVideoEncoderInfoMsg   *message,
                      uint8_t             *out);
size_t cvideo_encoder_info_msg__pack_to_buffer
                     (const CVideoEncoderInfoMsg   *message,
                      ProtobufCBuffer     *buffer);
CVideoEncoderInfoMsg *
       cvideo_encoder_info_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cvideo_encoder_info_msg__free_unpacked
                     (CVideoEncoderInfoMsg *message,
                      ProtobufCAllocator *allocator);
/* CPauseMsg methods */
void   cpause_msg__init
                     (CPauseMsg         *message);
size_t cpause_msg__get_packed_size
                     (const CPauseMsg   *message);
size_t cpause_msg__pack
                     (const CPauseMsg   *message,
                      uint8_t             *out);
size_t cpause_msg__pack_to_buffer
                     (const CPauseMsg   *message,
                      ProtobufCBuffer     *buffer);
CPauseMsg *
       cpause_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cpause_msg__free_unpacked
                     (CPauseMsg *message,
                      ProtobufCAllocator *allocator);
/* CResumeMsg methods */
void   cresume_msg__init
                     (CResumeMsg         *message);
size_t cresume_msg__get_packed_size
                     (const CResumeMsg   *message);
size_t cresume_msg__pack
                     (const CResumeMsg   *message,
                      uint8_t             *out);
size_t cresume_msg__pack_to_buffer
                     (const CResumeMsg   *message,
                      ProtobufCBuffer     *buffer);
CResumeMsg *
       cresume_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cresume_msg__free_unpacked
                     (CResumeMsg *message,
                      ProtobufCAllocator *allocator);
/* CEnableHighResCaptureMsg methods */
void   cenable_high_res_capture_msg__init
                     (CEnableHighResCaptureMsg         *message);
size_t cenable_high_res_capture_msg__get_packed_size
                     (const CEnableHighResCaptureMsg   *message);
size_t cenable_high_res_capture_msg__pack
                     (const CEnableHighResCaptureMsg   *message,
                      uint8_t             *out);
size_t cenable_high_res_capture_msg__pack_to_buffer
                     (const CEnableHighResCaptureMsg   *message,
                      ProtobufCBuffer     *buffer);
CEnableHighResCaptureMsg *
       cenable_high_res_capture_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cenable_high_res_capture_msg__free_unpacked
                     (CEnableHighResCaptureMsg *message,
                      ProtobufCAllocator *allocator);
/* CDisableHighResCaptureMsg methods */
void   cdisable_high_res_capture_msg__init
                     (CDisableHighResCaptureMsg         *message);
size_t cdisable_high_res_capture_msg__get_packed_size
                     (const CDisableHighResCaptureMsg   *message);
size_t cdisable_high_res_capture_msg__pack
                     (const CDisableHighResCaptureMsg   *message,
                      uint8_t             *out);
size_t cdisable_high_res_capture_msg__pack_to_buffer
                     (const CDisableHighResCaptureMsg   *message,
                      ProtobufCBuffer     *buffer);
CDisableHighResCaptureMsg *
       cdisable_high_res_capture_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdisable_high_res_capture_msg__free_unpacked
                     (CDisableHighResCaptureMsg *message,
                      ProtobufCAllocator *allocator);
/* CEnableNeptuneDataMsg methods */
void   cenable_neptune_data_msg__init
                     (CEnableNeptuneDataMsg         *message);
size_t cenable_neptune_data_msg__get_packed_size
                     (const CEnableNeptuneDataMsg   *message);
size_t cenable_neptune_data_msg__pack
                     (const CEnableNeptuneDataMsg   *message,
                      uint8_t             *out);
size_t cenable_neptune_data_msg__pack_to_buffer
                     (const CEnableNeptuneDataMsg   *message,
                      ProtobufCBuffer     *buffer);
CEnableNeptuneDataMsg *
       cenable_neptune_data_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cenable_neptune_data_msg__free_unpacked
                     (CEnableNeptuneDataMsg *message,
                      ProtobufCAllocator *allocator);
/* CDisableNeptuneDataMsg methods */
void   cdisable_neptune_data_msg__init
                     (CDisableNeptuneDataMsg         *message);
size_t cdisable_neptune_data_msg__get_packed_size
                     (const CDisableNeptuneDataMsg   *message);
size_t cdisable_neptune_data_msg__pack
                     (const CDisableNeptuneDataMsg   *message,
                      uint8_t             *out);
size_t cdisable_neptune_data_msg__pack_to_buffer
                     (const CDisableNeptuneDataMsg   *message,
                      ProtobufCBuffer     *buffer);
CDisableNeptuneDataMsg *
       cdisable_neptune_data_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdisable_neptune_data_msg__free_unpacked
                     (CDisableNeptuneDataMsg *message,
                      ProtobufCAllocator *allocator);
/* CPauseControllerInputMsg methods */
void   cpause_controller_input_msg__init
                     (CPauseControllerInputMsg         *message);
size_t cpause_controller_input_msg__get_packed_size
                     (const CPauseControllerInputMsg   *message);
size_t cpause_controller_input_msg__pack
                     (const CPauseControllerInputMsg   *message,
                      uint8_t             *out);
size_t cpause_controller_input_msg__pack_to_buffer
                     (const CPauseControllerInputMsg   *message,
                      ProtobufCBuffer     *buffer);
CPauseControllerInputMsg *
       cpause_controller_input_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cpause_controller_input_msg__free_unpacked
                     (CPauseControllerInputMsg *message,
                      ProtobufCAllocator *allocator);
/* CResumeControllerInputMsg methods */
void   cresume_controller_input_msg__init
                     (CResumeControllerInputMsg         *message);
size_t cresume_controller_input_msg__get_packed_size
                     (const CResumeControllerInputMsg   *message);
size_t cresume_controller_input_msg__pack
                     (const CResumeControllerInputMsg   *message,
                      uint8_t             *out);
size_t cresume_controller_input_msg__pack_to_buffer
                     (const CResumeControllerInputMsg   *message,
                      ProtobufCBuffer     *buffer);
CResumeControllerInputMsg *
       cresume_controller_input_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cresume_controller_input_msg__free_unpacked
                     (CResumeControllerInputMsg *message,
                      ProtobufCAllocator *allocator);
/* CToggleMagnificationMsg methods */
void   ctoggle_magnification_msg__init
                     (CToggleMagnificationMsg         *message);
size_t ctoggle_magnification_msg__get_packed_size
                     (const CToggleMagnificationMsg   *message);
size_t ctoggle_magnification_msg__pack
                     (const CToggleMagnificationMsg   *message,
                      uint8_t             *out);
size_t ctoggle_magnification_msg__pack_to_buffer
                     (const CToggleMagnificationMsg   *message,
                      ProtobufCBuffer     *buffer);
CToggleMagnificationMsg *
       ctoggle_magnification_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctoggle_magnification_msg__free_unpacked
                     (CToggleMagnificationMsg *message,
                      ProtobufCAllocator *allocator);
/* CSetCapslockMsg methods */
void   cset_capslock_msg__init
                     (CSetCapslockMsg         *message);
size_t cset_capslock_msg__get_packed_size
                     (const CSetCapslockMsg   *message);
size_t cset_capslock_msg__pack
                     (const CSetCapslockMsg   *message,
                      uint8_t             *out);
size_t cset_capslock_msg__pack_to_buffer
                     (const CSetCapslockMsg   *message,
                      ProtobufCBuffer     *buffer);
CSetCapslockMsg *
       cset_capslock_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cset_capslock_msg__free_unpacked
                     (CSetCapslockMsg *message,
                      ProtobufCAllocator *allocator);
/* CStreamingKeymapEntry methods */
void   cstreaming_keymap_entry__init
                     (CStreamingKeymapEntry         *message);
size_t cstreaming_keymap_entry__get_packed_size
                     (const CStreamingKeymapEntry   *message);
size_t cstreaming_keymap_entry__pack
                     (const CStreamingKeymapEntry   *message,
                      uint8_t             *out);
size_t cstreaming_keymap_entry__pack_to_buffer
                     (const CStreamingKeymapEntry   *message,
                      ProtobufCBuffer     *buffer);
CStreamingKeymapEntry *
       cstreaming_keymap_entry__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cstreaming_keymap_entry__free_unpacked
                     (CStreamingKeymapEntry *message,
                      ProtobufCAllocator *allocator);
/* CStreamingKeymap methods */
void   cstreaming_keymap__init
                     (CStreamingKeymap         *message);
size_t cstreaming_keymap__get_packed_size
                     (const CStreamingKeymap   *message);
size_t cstreaming_keymap__pack
                     (const CStreamingKeymap   *message,
                      uint8_t             *out);
size_t cstreaming_keymap__pack_to_buffer
                     (const CStreamingKeymap   *message,
                      ProtobufCBuffer     *buffer);
CStreamingKeymap *
       cstreaming_keymap__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cstreaming_keymap__free_unpacked
                     (CStreamingKeymap *message,
                      ProtobufCAllocator *allocator);
/* CSetKeymapMsg methods */
void   cset_keymap_msg__init
                     (CSetKeymapMsg         *message);
size_t cset_keymap_msg__get_packed_size
                     (const CSetKeymapMsg   *message);
size_t cset_keymap_msg__pack
                     (const CSetKeymapMsg   *message,
                      uint8_t             *out);
size_t cset_keymap_msg__pack_to_buffer
                     (const CSetKeymapMsg   *message,
                      ProtobufCBuffer     *buffer);
CSetKeymapMsg *
       cset_keymap_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cset_keymap_msg__free_unpacked
                     (CSetKeymapMsg *message,
                      ProtobufCAllocator *allocator);
/* CStopRequest methods */
void   cstop_request__init
                     (CStopRequest         *message);
size_t cstop_request__get_packed_size
                     (const CStopRequest   *message);
size_t cstop_request__pack
                     (const CStopRequest   *message,
                      uint8_t             *out);
size_t cstop_request__pack_to_buffer
                     (const CStopRequest   *message,
                      ProtobufCBuffer     *buffer);
CStopRequest *
       cstop_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cstop_request__free_unpacked
                     (CStopRequest *message,
                      ProtobufCAllocator *allocator);
/* CQuitRequest methods */
void   cquit_request__init
                     (CQuitRequest         *message);
size_t cquit_request__get_packed_size
                     (const CQuitRequest   *message);
size_t cquit_request__pack
                     (const CQuitRequest   *message,
                      uint8_t             *out);
size_t cquit_request__pack_to_buffer
                     (const CQuitRequest   *message,
                      ProtobufCBuffer     *buffer);
CQuitRequest *
       cquit_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cquit_request__free_unpacked
                     (CQuitRequest *message,
                      ProtobufCAllocator *allocator);
/* CDeleteCursorMsg methods */
void   cdelete_cursor_msg__init
                     (CDeleteCursorMsg         *message);
size_t cdelete_cursor_msg__get_packed_size
                     (const CDeleteCursorMsg   *message);
size_t cdelete_cursor_msg__pack
                     (const CDeleteCursorMsg   *message,
                      uint8_t             *out);
size_t cdelete_cursor_msg__pack_to_buffer
                     (const CDeleteCursorMsg   *message,
                      ProtobufCBuffer     *buffer);
CDeleteCursorMsg *
       cdelete_cursor_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdelete_cursor_msg__free_unpacked
                     (CDeleteCursorMsg *message,
                      ProtobufCAllocator *allocator);
/* CSetStreamingClientConfig methods */
void   cset_streaming_client_config__init
                     (CSetStreamingClientConfig         *message);
size_t cset_streaming_client_config__get_packed_size
                     (const CSetStreamingClientConfig   *message);
size_t cset_streaming_client_config__pack
                     (const CSetStreamingClientConfig   *message,
                      uint8_t             *out);
size_t cset_streaming_client_config__pack_to_buffer
                     (const CSetStreamingClientConfig   *message,
                      ProtobufCBuffer     *buffer);
CSetStreamingClientConfig *
       cset_streaming_client_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cset_streaming_client_config__free_unpacked
                     (CSetStreamingClientConfig *message,
                      ProtobufCAllocator *allocator);
/* CSetQoSMsg methods */
void   cset_qo_smsg__init
                     (CSetQoSMsg         *message);
size_t cset_qo_smsg__get_packed_size
                     (const CSetQoSMsg   *message);
size_t cset_qo_smsg__pack
                     (const CSetQoSMsg   *message,
                      uint8_t             *out);
size_t cset_qo_smsg__pack_to_buffer
                     (const CSetQoSMsg   *message,
                      ProtobufCBuffer     *buffer);
CSetQoSMsg *
       cset_qo_smsg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cset_qo_smsg__free_unpacked
                     (CSetQoSMsg *message,
                      ProtobufCAllocator *allocator);
/* CSetTargetFramerateMsg methods */
void   cset_target_framerate_msg__init
                     (CSetTargetFramerateMsg         *message);
size_t cset_target_framerate_msg__get_packed_size
                     (const CSetTargetFramerateMsg   *message);
size_t cset_target_framerate_msg__pack
                     (const CSetTargetFramerateMsg   *message,
                      uint8_t             *out);
size_t cset_target_framerate_msg__pack_to_buffer
                     (const CSetTargetFramerateMsg   *message,
                      ProtobufCBuffer     *buffer);
CSetTargetFramerateMsg *
       cset_target_framerate_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cset_target_framerate_msg__free_unpacked
                     (CSetTargetFramerateMsg *message,
                      ProtobufCAllocator *allocator);
/* CSetTargetBitrateMsg methods */
void   cset_target_bitrate_msg__init
                     (CSetTargetBitrateMsg         *message);
size_t cset_target_bitrate_msg__get_packed_size
                     (const CSetTargetBitrateMsg   *message);
size_t cset_target_bitrate_msg__pack
                     (const CSetTargetBitrateMsg   *message,
                      uint8_t             *out);
size_t cset_target_bitrate_msg__pack_to_buffer
                     (const CSetTargetBitrateMsg   *message,
                      ProtobufCBuffer     *buffer);
CSetTargetBitrateMsg *
       cset_target_bitrate_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cset_target_bitrate_msg__free_unpacked
                     (CSetTargetBitrateMsg *message,
                      ProtobufCAllocator *allocator);
/* COverlayEnabledMsg methods */
void   coverlay_enabled_msg__init
                     (COverlayEnabledMsg         *message);
size_t coverlay_enabled_msg__get_packed_size
                     (const COverlayEnabledMsg   *message);
size_t coverlay_enabled_msg__pack
                     (const COverlayEnabledMsg   *message,
                      uint8_t             *out);
size_t coverlay_enabled_msg__pack_to_buffer
                     (const COverlayEnabledMsg   *message,
                      ProtobufCBuffer     *buffer);
COverlayEnabledMsg *
       coverlay_enabled_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   coverlay_enabled_msg__free_unpacked
                     (COverlayEnabledMsg *message,
                      ProtobufCAllocator *allocator);
/* CSetGammaRampMsg methods */
void   cset_gamma_ramp_msg__init
                     (CSetGammaRampMsg         *message);
size_t cset_gamma_ramp_msg__get_packed_size
                     (const CSetGammaRampMsg   *message);
size_t cset_gamma_ramp_msg__pack
                     (const CSetGammaRampMsg   *message,
                      uint8_t             *out);
size_t cset_gamma_ramp_msg__pack_to_buffer
                     (const CSetGammaRampMsg   *message,
                      ProtobufCBuffer     *buffer);
CSetGammaRampMsg *
       cset_gamma_ramp_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cset_gamma_ramp_msg__free_unpacked
                     (CSetGammaRampMsg *message,
                      ProtobufCAllocator *allocator);
/* CSetActivityMsg methods */
void   cset_activity_msg__init
                     (CSetActivityMsg         *message);
size_t cset_activity_msg__get_packed_size
                     (const CSetActivityMsg   *message);
size_t cset_activity_msg__pack
                     (const CSetActivityMsg   *message,
                      uint8_t             *out);
size_t cset_activity_msg__pack_to_buffer
                     (const CSetActivityMsg   *message,
                      ProtobufCBuffer     *buffer);
CSetActivityMsg *
       cset_activity_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cset_activity_msg__free_unpacked
                     (CSetActivityMsg *message,
                      ProtobufCAllocator *allocator);
/* CSystemSuspendMsg methods */
void   csystem_suspend_msg__init
                     (CSystemSuspendMsg         *message);
size_t csystem_suspend_msg__get_packed_size
                     (const CSystemSuspendMsg   *message);
size_t csystem_suspend_msg__pack
                     (const CSystemSuspendMsg   *message,
                      uint8_t             *out);
size_t csystem_suspend_msg__pack_to_buffer
                     (const CSystemSuspendMsg   *message,
                      ProtobufCBuffer     *buffer);
CSystemSuspendMsg *
       csystem_suspend_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   csystem_suspend_msg__free_unpacked
                     (CSystemSuspendMsg *message,
                      ProtobufCAllocator *allocator);
/* CVirtualHereRequestMsg methods */
void   cvirtual_here_request_msg__init
                     (CVirtualHereRequestMsg         *message);
size_t cvirtual_here_request_msg__get_packed_size
                     (const CVirtualHereRequestMsg   *message);
size_t cvirtual_here_request_msg__pack
                     (const CVirtualHereRequestMsg   *message,
                      uint8_t             *out);
size_t cvirtual_here_request_msg__pack_to_buffer
                     (const CVirtualHereRequestMsg   *message,
                      ProtobufCBuffer     *buffer);
CVirtualHereRequestMsg *
       cvirtual_here_request_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cvirtual_here_request_msg__free_unpacked
                     (CVirtualHereRequestMsg *message,
                      ProtobufCAllocator *allocator);
/* CVirtualHereReadyMsg methods */
void   cvirtual_here_ready_msg__init
                     (CVirtualHereReadyMsg         *message);
size_t cvirtual_here_ready_msg__get_packed_size
                     (const CVirtualHereReadyMsg   *message);
size_t cvirtual_here_ready_msg__pack
                     (const CVirtualHereReadyMsg   *message,
                      uint8_t             *out);
size_t cvirtual_here_ready_msg__pack_to_buffer
                     (const CVirtualHereReadyMsg   *message,
                      ProtobufCBuffer     *buffer);
CVirtualHereReadyMsg *
       cvirtual_here_ready_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cvirtual_here_ready_msg__free_unpacked
                     (CVirtualHereReadyMsg *message,
                      ProtobufCAllocator *allocator);
/* CVirtualHereShareDeviceMsg methods */
void   cvirtual_here_share_device_msg__init
                     (CVirtualHereShareDeviceMsg         *message);
size_t cvirtual_here_share_device_msg__get_packed_size
                     (const CVirtualHereShareDeviceMsg   *message);
size_t cvirtual_here_share_device_msg__pack
                     (const CVirtualHereShareDeviceMsg   *message,
                      uint8_t             *out);
size_t cvirtual_here_share_device_msg__pack_to_buffer
                     (const CVirtualHereShareDeviceMsg   *message,
                      ProtobufCBuffer     *buffer);
CVirtualHereShareDeviceMsg *
       cvirtual_here_share_device_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cvirtual_here_share_device_msg__free_unpacked
                     (CVirtualHereShareDeviceMsg *message,
                      ProtobufCAllocator *allocator);
/* CSetSpectatorModeMsg methods */
void   cset_spectator_mode_msg__init
                     (CSetSpectatorModeMsg         *message);
size_t cset_spectator_mode_msg__get_packed_size
                     (const CSetSpectatorModeMsg   *message);
size_t cset_spectator_mode_msg__pack
                     (const CSetSpectatorModeMsg   *message,
                      uint8_t             *out);
size_t cset_spectator_mode_msg__pack_to_buffer
                     (const CSetSpectatorModeMsg   *message,
                      ProtobufCBuffer     *buffer);
CSetSpectatorModeMsg *
       cset_spectator_mode_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cset_spectator_mode_msg__free_unpacked
                     (CSetSpectatorModeMsg *message,
                      ProtobufCAllocator *allocator);
/* CRemoteHIDMsg methods */
void   cremote_hidmsg__init
                     (CRemoteHIDMsg         *message);
size_t cremote_hidmsg__get_packed_size
                     (const CRemoteHIDMsg   *message);
size_t cremote_hidmsg__pack
                     (const CRemoteHIDMsg   *message,
                      uint8_t             *out);
size_t cremote_hidmsg__pack_to_buffer
                     (const CRemoteHIDMsg   *message,
                      ProtobufCBuffer     *buffer);
CRemoteHIDMsg *
       cremote_hidmsg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cremote_hidmsg__free_unpacked
                     (CRemoteHIDMsg *message,
                      ProtobufCAllocator *allocator);
/* CTouchConfigActiveMsg methods */
void   ctouch_config_active_msg__init
                     (CTouchConfigActiveMsg         *message);
size_t ctouch_config_active_msg__get_packed_size
                     (const CTouchConfigActiveMsg   *message);
size_t ctouch_config_active_msg__pack
                     (const CTouchConfigActiveMsg   *message,
                      uint8_t             *out);
size_t ctouch_config_active_msg__pack_to_buffer
                     (const CTouchConfigActiveMsg   *message,
                      ProtobufCBuffer     *buffer);
CTouchConfigActiveMsg *
       ctouch_config_active_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctouch_config_active_msg__free_unpacked
                     (CTouchConfigActiveMsg *message,
                      ProtobufCAllocator *allocator);
/* CGetTouchConfigDataMsg methods */
void   cget_touch_config_data_msg__init
                     (CGetTouchConfigDataMsg         *message);
size_t cget_touch_config_data_msg__get_packed_size
                     (const CGetTouchConfigDataMsg   *message);
size_t cget_touch_config_data_msg__pack
                     (const CGetTouchConfigDataMsg   *message,
                      uint8_t             *out);
size_t cget_touch_config_data_msg__pack_to_buffer
                     (const CGetTouchConfigDataMsg   *message,
                      ProtobufCBuffer     *buffer);
CGetTouchConfigDataMsg *
       cget_touch_config_data_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cget_touch_config_data_msg__free_unpacked
                     (CGetTouchConfigDataMsg *message,
                      ProtobufCAllocator *allocator);
/* CSetTouchConfigDataMsg methods */
void   cset_touch_config_data_msg__init
                     (CSetTouchConfigDataMsg         *message);
size_t cset_touch_config_data_msg__get_packed_size
                     (const CSetTouchConfigDataMsg   *message);
size_t cset_touch_config_data_msg__pack
                     (const CSetTouchConfigDataMsg   *message,
                      uint8_t             *out);
size_t cset_touch_config_data_msg__pack_to_buffer
                     (const CSetTouchConfigDataMsg   *message,
                      ProtobufCBuffer     *buffer);
CSetTouchConfigDataMsg *
       cset_touch_config_data_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cset_touch_config_data_msg__free_unpacked
                     (CSetTouchConfigDataMsg *message,
                      ProtobufCAllocator *allocator);
/* CSaveTouchConfigLayoutMsg methods */
void   csave_touch_config_layout_msg__init
                     (CSaveTouchConfigLayoutMsg         *message);
size_t csave_touch_config_layout_msg__get_packed_size
                     (const CSaveTouchConfigLayoutMsg   *message);
size_t csave_touch_config_layout_msg__pack
                     (const CSaveTouchConfigLayoutMsg   *message,
                      uint8_t             *out);
size_t csave_touch_config_layout_msg__pack_to_buffer
                     (const CSaveTouchConfigLayoutMsg   *message,
                      ProtobufCBuffer     *buffer);
CSaveTouchConfigLayoutMsg *
       csave_touch_config_layout_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   csave_touch_config_layout_msg__free_unpacked
                     (CSaveTouchConfigLayoutMsg *message,
                      ProtobufCAllocator *allocator);
/* CTouchActionSetActiveMsg methods */
void   ctouch_action_set_active_msg__init
                     (CTouchActionSetActiveMsg         *message);
size_t ctouch_action_set_active_msg__get_packed_size
                     (const CTouchActionSetActiveMsg   *message);
size_t ctouch_action_set_active_msg__pack
                     (const CTouchActionSetActiveMsg   *message,
                      uint8_t             *out);
size_t ctouch_action_set_active_msg__pack_to_buffer
                     (const CTouchActionSetActiveMsg   *message,
                      ProtobufCBuffer     *buffer);
CTouchActionSetActiveMsg *
       ctouch_action_set_active_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctouch_action_set_active_msg__free_unpacked
                     (CTouchActionSetActiveMsg *message,
                      ProtobufCAllocator *allocator);
/* CTouchActionSetLayerAddedMsg methods */
void   ctouch_action_set_layer_added_msg__init
                     (CTouchActionSetLayerAddedMsg         *message);
size_t ctouch_action_set_layer_added_msg__get_packed_size
                     (const CTouchActionSetLayerAddedMsg   *message);
size_t ctouch_action_set_layer_added_msg__pack
                     (const CTouchActionSetLayerAddedMsg   *message,
                      uint8_t             *out);
size_t ctouch_action_set_layer_added_msg__pack_to_buffer
                     (const CTouchActionSetLayerAddedMsg   *message,
                      ProtobufCBuffer     *buffer);
CTouchActionSetLayerAddedMsg *
       ctouch_action_set_layer_added_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctouch_action_set_layer_added_msg__free_unpacked
                     (CTouchActionSetLayerAddedMsg *message,
                      ProtobufCAllocator *allocator);
/* CTouchActionSetLayerRemovedMsg methods */
void   ctouch_action_set_layer_removed_msg__init
                     (CTouchActionSetLayerRemovedMsg         *message);
size_t ctouch_action_set_layer_removed_msg__get_packed_size
                     (const CTouchActionSetLayerRemovedMsg   *message);
size_t ctouch_action_set_layer_removed_msg__pack
                     (const CTouchActionSetLayerRemovedMsg   *message,
                      uint8_t             *out);
size_t ctouch_action_set_layer_removed_msg__pack_to_buffer
                     (const CTouchActionSetLayerRemovedMsg   *message,
                      ProtobufCBuffer     *buffer);
CTouchActionSetLayerRemovedMsg *
       ctouch_action_set_layer_removed_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctouch_action_set_layer_removed_msg__free_unpacked
                     (CTouchActionSetLayerRemovedMsg *message,
                      ProtobufCAllocator *allocator);
/* CGetTouchIconDataMsg methods */
void   cget_touch_icon_data_msg__init
                     (CGetTouchIconDataMsg         *message);
size_t cget_touch_icon_data_msg__get_packed_size
                     (const CGetTouchIconDataMsg   *message);
size_t cget_touch_icon_data_msg__pack
                     (const CGetTouchIconDataMsg   *message,
                      uint8_t             *out);
size_t cget_touch_icon_data_msg__pack_to_buffer
                     (const CGetTouchIconDataMsg   *message,
                      ProtobufCBuffer     *buffer);
CGetTouchIconDataMsg *
       cget_touch_icon_data_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cget_touch_icon_data_msg__free_unpacked
                     (CGetTouchIconDataMsg *message,
                      ProtobufCAllocator *allocator);
/* CSetTouchIconDataMsg methods */
void   cset_touch_icon_data_msg__init
                     (CSetTouchIconDataMsg         *message);
size_t cset_touch_icon_data_msg__get_packed_size
                     (const CSetTouchIconDataMsg   *message);
size_t cset_touch_icon_data_msg__pack
                     (const CSetTouchIconDataMsg   *message,
                      uint8_t             *out);
size_t cset_touch_icon_data_msg__pack_to_buffer
                     (const CSetTouchIconDataMsg   *message,
                      ProtobufCBuffer     *buffer);
CSetTouchIconDataMsg *
       cset_touch_icon_data_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cset_touch_icon_data_msg__free_unpacked
                     (CSetTouchIconDataMsg *message,
                      ProtobufCAllocator *allocator);
/* CRemotePlayTogetherGroupUpdateMsg__Player methods */
void   cremote_play_together_group_update_msg__player__init
                     (CRemotePlayTogetherGroupUpdateMsg__Player         *message);
/* CRemotePlayTogetherGroupUpdateMsg methods */
void   cremote_play_together_group_update_msg__init
                     (CRemotePlayTogetherGroupUpdateMsg         *message);
size_t cremote_play_together_group_update_msg__get_packed_size
                     (const CRemotePlayTogetherGroupUpdateMsg   *message);
size_t cremote_play_together_group_update_msg__pack
                     (const CRemotePlayTogetherGroupUpdateMsg   *message,
                      uint8_t             *out);
size_t cremote_play_together_group_update_msg__pack_to_buffer
                     (const CRemotePlayTogetherGroupUpdateMsg   *message,
                      ProtobufCBuffer     *buffer);
CRemotePlayTogetherGroupUpdateMsg *
       cremote_play_together_group_update_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cremote_play_together_group_update_msg__free_unpacked
                     (CRemotePlayTogetherGroupUpdateMsg *message,
                      ProtobufCAllocator *allocator);
/* CSetInputTemporarilyDisabledMsg methods */
void   cset_input_temporarily_disabled_msg__init
                     (CSetInputTemporarilyDisabledMsg         *message);
size_t cset_input_temporarily_disabled_msg__get_packed_size
                     (const CSetInputTemporarilyDisabledMsg   *message);
size_t cset_input_temporarily_disabled_msg__pack
                     (const CSetInputTemporarilyDisabledMsg   *message,
                      uint8_t             *out);
size_t cset_input_temporarily_disabled_msg__pack_to_buffer
                     (const CSetInputTemporarilyDisabledMsg   *message,
                      ProtobufCBuffer     *buffer);
CSetInputTemporarilyDisabledMsg *
       cset_input_temporarily_disabled_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cset_input_temporarily_disabled_msg__free_unpacked
                     (CSetInputTemporarilyDisabledMsg *message,
                      ProtobufCAllocator *allocator);
/* CSetQualityOverrideMsg methods */
void   cset_quality_override_msg__init
                     (CSetQualityOverrideMsg         *message);
size_t cset_quality_override_msg__get_packed_size
                     (const CSetQualityOverrideMsg   *message);
size_t cset_quality_override_msg__pack
                     (const CSetQualityOverrideMsg   *message,
                      uint8_t             *out);
size_t cset_quality_override_msg__pack_to_buffer
                     (const CSetQualityOverrideMsg   *message,
                      ProtobufCBuffer     *buffer);
CSetQualityOverrideMsg *
       cset_quality_override_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cset_quality_override_msg__free_unpacked
                     (CSetQualityOverrideMsg *message,
                      ProtobufCAllocator *allocator);
/* CSetBitrateOverrideMsg methods */
void   cset_bitrate_override_msg__init
                     (CSetBitrateOverrideMsg         *message);
size_t cset_bitrate_override_msg__get_packed_size
                     (const CSetBitrateOverrideMsg   *message);
size_t cset_bitrate_override_msg__pack
                     (const CSetBitrateOverrideMsg   *message,
                      uint8_t             *out);
size_t cset_bitrate_override_msg__pack_to_buffer
                     (const CSetBitrateOverrideMsg   *message,
                      ProtobufCBuffer     *buffer);
CSetBitrateOverrideMsg *
       cset_bitrate_override_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cset_bitrate_override_msg__free_unpacked
                     (CSetBitrateOverrideMsg *message,
                      ProtobufCAllocator *allocator);
/* CShowOnScreenKeyboardMsg methods */
void   cshow_on_screen_keyboard_msg__init
                     (CShowOnScreenKeyboardMsg         *message);
size_t cshow_on_screen_keyboard_msg__get_packed_size
                     (const CShowOnScreenKeyboardMsg   *message);
size_t cshow_on_screen_keyboard_msg__pack
                     (const CShowOnScreenKeyboardMsg   *message,
                      uint8_t             *out);
size_t cshow_on_screen_keyboard_msg__pack_to_buffer
                     (const CShowOnScreenKeyboardMsg   *message,
                      ProtobufCBuffer     *buffer);
CShowOnScreenKeyboardMsg *
       cshow_on_screen_keyboard_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cshow_on_screen_keyboard_msg__free_unpacked
                     (CShowOnScreenKeyboardMsg *message,
                      ProtobufCAllocator *allocator);
/* CControllerPersonalizationUpdateMsg methods */
void   ccontroller_personalization_update_msg__init
                     (CControllerPersonalizationUpdateMsg         *message);
size_t ccontroller_personalization_update_msg__get_packed_size
                     (const CControllerPersonalizationUpdateMsg   *message);
size_t ccontroller_personalization_update_msg__pack
                     (const CControllerPersonalizationUpdateMsg   *message,
                      uint8_t             *out);
size_t ccontroller_personalization_update_msg__pack_to_buffer
                     (const CControllerPersonalizationUpdateMsg   *message,
                      ProtobufCBuffer     *buffer);
CControllerPersonalizationUpdateMsg *
       ccontroller_personalization_update_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ccontroller_personalization_update_msg__free_unpacked
                     (CControllerPersonalizationUpdateMsg *message,
                      ProtobufCAllocator *allocator);
/* CVRConnectionReady methods */
void   cvrconnection_ready__init
                     (CVRConnectionReady         *message);
size_t cvrconnection_ready__get_packed_size
                     (const CVRConnectionReady   *message);
size_t cvrconnection_ready__pack
                     (const CVRConnectionReady   *message,
                      uint8_t             *out);
size_t cvrconnection_ready__pack_to_buffer
                     (const CVRConnectionReady   *message,
                      ProtobufCBuffer     *buffer);
CVRConnectionReady *
       cvrconnection_ready__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cvrconnection_ready__free_unpacked
                     (CVRConnectionReady *message,
                      ProtobufCAllocator *allocator);
/* CStreamDataLostMsg methods */
void   cstream_data_lost_msg__init
                     (CStreamDataLostMsg         *message);
size_t cstream_data_lost_msg__get_packed_size
                     (const CStreamDataLostMsg   *message);
size_t cstream_data_lost_msg__pack
                     (const CStreamDataLostMsg   *message,
                      uint8_t             *out);
size_t cstream_data_lost_msg__pack_to_buffer
                     (const CStreamDataLostMsg   *message,
                      ProtobufCBuffer     *buffer);
CStreamDataLostMsg *
       cstream_data_lost_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cstream_data_lost_msg__free_unpacked
                     (CStreamDataLostMsg *message,
                      ProtobufCAllocator *allocator);
/* CAudioFormat methods */
void   caudio_format__init
                     (CAudioFormat         *message);
size_t caudio_format__get_packed_size
                     (const CAudioFormat   *message);
size_t caudio_format__pack
                     (const CAudioFormat   *message,
                      uint8_t             *out);
size_t caudio_format__pack_to_buffer
                     (const CAudioFormat   *message,
                      ProtobufCBuffer     *buffer);
CAudioFormat *
       caudio_format__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   caudio_format__free_unpacked
                     (CAudioFormat *message,
                      ProtobufCAllocator *allocator);
/* CVideoFormat methods */
void   cvideo_format__init
                     (CVideoFormat         *message);
size_t cvideo_format__get_packed_size
                     (const CVideoFormat   *message);
size_t cvideo_format__pack
                     (const CVideoFormat   *message,
                      uint8_t             *out);
size_t cvideo_format__pack_to_buffer
                     (const CVideoFormat   *message,
                      ProtobufCBuffer     *buffer);
CVideoFormat *
       cvideo_format__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cvideo_format__free_unpacked
                     (CVideoFormat *message,
                      ProtobufCAllocator *allocator);
/* CFrameEvent methods */
void   cframe_event__init
                     (CFrameEvent         *message);
size_t cframe_event__get_packed_size
                     (const CFrameEvent   *message);
size_t cframe_event__pack
                     (const CFrameEvent   *message,
                      uint8_t             *out);
size_t cframe_event__pack_to_buffer
                     (const CFrameEvent   *message,
                      ProtobufCBuffer     *buffer);
CFrameEvent *
       cframe_event__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cframe_event__free_unpacked
                     (CFrameEvent *message,
                      ProtobufCAllocator *allocator);
/* CFrameStats methods */
void   cframe_stats__init
                     (CFrameStats         *message);
size_t cframe_stats__get_packed_size
                     (const CFrameStats   *message);
size_t cframe_stats__pack
                     (const CFrameStats   *message,
                      uint8_t             *out);
size_t cframe_stats__pack_to_buffer
                     (const CFrameStats   *message,
                      ProtobufCBuffer     *buffer);
CFrameStats *
       cframe_stats__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cframe_stats__free_unpacked
                     (CFrameStats *message,
                      ProtobufCAllocator *allocator);
/* CFrameStatAccumulatedValue methods */
void   cframe_stat_accumulated_value__init
                     (CFrameStatAccumulatedValue         *message);
size_t cframe_stat_accumulated_value__get_packed_size
                     (const CFrameStatAccumulatedValue   *message);
size_t cframe_stat_accumulated_value__pack
                     (const CFrameStatAccumulatedValue   *message,
                      uint8_t             *out);
size_t cframe_stat_accumulated_value__pack_to_buffer
                     (const CFrameStatAccumulatedValue   *message,
                      ProtobufCBuffer     *buffer);
CFrameStatAccumulatedValue *
       cframe_stat_accumulated_value__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cframe_stat_accumulated_value__free_unpacked
                     (CFrameStatAccumulatedValue *message,
                      ProtobufCAllocator *allocator);
/* CFrameStatsListMsg methods */
void   cframe_stats_list_msg__init
                     (CFrameStatsListMsg         *message);
size_t cframe_stats_list_msg__get_packed_size
                     (const CFrameStatsListMsg   *message);
size_t cframe_stats_list_msg__pack
                     (const CFrameStatsListMsg   *message,
                      uint8_t             *out);
size_t cframe_stats_list_msg__pack_to_buffer
                     (const CFrameStatsListMsg   *message,
                      ProtobufCBuffer     *buffer);
CFrameStatsListMsg *
       cframe_stats_list_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cframe_stats_list_msg__free_unpacked
                     (CFrameStatsListMsg *message,
                      ProtobufCAllocator *allocator);
/* CStreamingSessionStats methods */
void   cstreaming_session_stats__init
                     (CStreamingSessionStats         *message);
size_t cstreaming_session_stats__get_packed_size
                     (const CStreamingSessionStats   *message);
size_t cstreaming_session_stats__pack
                     (const CStreamingSessionStats   *message,
                      uint8_t             *out);
size_t cstreaming_session_stats__pack_to_buffer
                     (const CStreamingSessionStats   *message,
                      ProtobufCBuffer     *buffer);
CStreamingSessionStats *
       cstreaming_session_stats__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cstreaming_session_stats__free_unpacked
                     (CStreamingSessionStats *message,
                      ProtobufCAllocator *allocator);
/* CDebugDumpMsg methods */
void   cdebug_dump_msg__init
                     (CDebugDumpMsg         *message);
size_t cdebug_dump_msg__get_packed_size
                     (const CDebugDumpMsg   *message);
size_t cdebug_dump_msg__pack
                     (const CDebugDumpMsg   *message,
                      uint8_t             *out);
size_t cdebug_dump_msg__pack_to_buffer
                     (const CDebugDumpMsg   *message,
                      ProtobufCBuffer     *buffer);
CDebugDumpMsg *
       cdebug_dump_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   cdebug_dump_msg__free_unpacked
                     (CDebugDumpMsg *message,
                      ProtobufCAllocator *allocator);
/* CLogMsg methods */
void   clog_msg__init
                     (CLogMsg         *message);
size_t clog_msg__get_packed_size
                     (const CLogMsg   *message);
size_t clog_msg__pack
                     (const CLogMsg   *message,
                      uint8_t             *out);
size_t clog_msg__pack_to_buffer
                     (const CLogMsg   *message,
                      ProtobufCBuffer     *buffer);
CLogMsg *
       clog_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   clog_msg__free_unpacked
                     (CLogMsg *message,
                      ProtobufCAllocator *allocator);
/* CLogUploadMsg methods */
void   clog_upload_msg__init
                     (CLogUploadMsg         *message);
size_t clog_upload_msg__get_packed_size
                     (const CLogUploadMsg   *message);
size_t clog_upload_msg__pack
                     (const CLogUploadMsg   *message,
                      uint8_t             *out);
size_t clog_upload_msg__pack_to_buffer
                     (const CLogUploadMsg   *message,
                      ProtobufCBuffer     *buffer);
CLogUploadMsg *
       clog_upload_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   clog_upload_msg__free_unpacked
                     (CLogUploadMsg *message,
                      ProtobufCAllocator *allocator);
/* CTransportSignalMsg__WebRTCMessage__Candidate methods */
void   ctransport_signal_msg__web_rtcmessage__candidate__init
                     (CTransportSignalMsg__WebRTCMessage__Candidate         *message);
/* CTransportSignalMsg__WebRTCMessage methods */
void   ctransport_signal_msg__web_rtcmessage__init
                     (CTransportSignalMsg__WebRTCMessage         *message);
/* CTransportSignalMsg methods */
void   ctransport_signal_msg__init
                     (CTransportSignalMsg         *message);
size_t ctransport_signal_msg__get_packed_size
                     (const CTransportSignalMsg   *message);
size_t ctransport_signal_msg__pack
                     (const CTransportSignalMsg   *message,
                      uint8_t             *out);
size_t ctransport_signal_msg__pack_to_buffer
                     (const CTransportSignalMsg   *message,
                      ProtobufCBuffer     *buffer);
CTransportSignalMsg *
       ctransport_signal_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ctransport_signal_msg__free_unpacked
                     (CTransportSignalMsg *message,
                      ProtobufCAllocator *allocator);
/* CControllerConfigMsg__ControllerConfigResponse methods */
void   ccontroller_config_msg__controller_config_response__init
                     (CControllerConfigMsg__ControllerConfigResponse         *message);
/* CControllerConfigMsg__ControllerPersonalizationResponse methods */
void   ccontroller_config_msg__controller_personalization_response__init
                     (CControllerConfigMsg__ControllerPersonalizationResponse         *message);
/* CControllerConfigMsg__ControllerActiveConfigChangeResponse methods */
void   ccontroller_config_msg__controller_active_config_change_response__init
                     (CControllerConfigMsg__ControllerActiveConfigChangeResponse         *message);
/* CControllerConfigMsg__ControllerActiveConfigMsg methods */
void   ccontroller_config_msg__controller_active_config_msg__init
                     (CControllerConfigMsg__ControllerActiveConfigMsg         *message);
/* CControllerConfigMsg methods */
void   ccontroller_config_msg__init
                     (CControllerConfigMsg         *message);
size_t ccontroller_config_msg__get_packed_size
                     (const CControllerConfigMsg   *message);
size_t ccontroller_config_msg__pack
                     (const CControllerConfigMsg   *message,
                      uint8_t             *out);
size_t ccontroller_config_msg__pack_to_buffer
                     (const CControllerConfigMsg   *message,
                      ProtobufCBuffer     *buffer);
CControllerConfigMsg *
       ccontroller_config_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ccontroller_config_msg__free_unpacked
                     (CControllerConfigMsg *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*CDiscoveryPingRequest_Closure)
                 (const CDiscoveryPingRequest *message,
                  void *closure_data);
typedef void (*CDiscoveryPingResponse_Closure)
                 (const CDiscoveryPingResponse *message,
                  void *closure_data);
typedef void (*CStreamingClientHandshakeInfo_Closure)
                 (const CStreamingClientHandshakeInfo *message,
                  void *closure_data);
typedef void (*CClientHandshakeMsg_Closure)
                 (const CClientHandshakeMsg *message,
                  void *closure_data);
typedef void (*CStreamingServerHandshakeInfo_Closure)
                 (const CStreamingServerHandshakeInfo *message,
                  void *closure_data);
typedef void (*CServerHandshakeMsg_Closure)
                 (const CServerHandshakeMsg *message,
                  void *closure_data);
typedef void (*CAuthenticationRequestMsg_Closure)
                 (const CAuthenticationRequestMsg *message,
                  void *closure_data);
typedef void (*CAuthenticationResponseMsg_Closure)
                 (const CAuthenticationResponseMsg *message,
                  void *closure_data);
typedef void (*CKeepAliveMsg_Closure)
                 (const CKeepAliveMsg *message,
                  void *closure_data);
typedef void (*CStartNetworkTestMsg_Closure)
                 (const CStartNetworkTestMsg *message,
                  void *closure_data);
typedef void (*CStreamVideoMode_Closure)
                 (const CStreamVideoMode *message,
                  void *closure_data);
typedef void (*CStreamVideoLimit_Closure)
                 (const CStreamVideoLimit *message,
                  void *closure_data);
typedef void (*CStreamingClientCaps_Closure)
                 (const CStreamingClientCaps *message,
                  void *closure_data);
typedef void (*CStreamingClientConfig_Closure)
                 (const CStreamingClientConfig *message,
                  void *closure_data);
typedef void (*CStreamingServerConfig_Closure)
                 (const CStreamingServerConfig *message,
                  void *closure_data);
typedef void (*CNegotiatedConfig_Closure)
                 (const CNegotiatedConfig *message,
                  void *closure_data);
typedef void (*CNegotiationInitMsg_Closure)
                 (const CNegotiationInitMsg *message,
                  void *closure_data);
typedef void (*CNegotiationSetConfigMsg_Closure)
                 (const CNegotiationSetConfigMsg *message,
                  void *closure_data);
typedef void (*CNegotiationCompleteMsg_Closure)
                 (const CNegotiationCompleteMsg *message,
                  void *closure_data);
typedef void (*CStartAudioDataMsg_Closure)
                 (const CStartAudioDataMsg *message,
                  void *closure_data);
typedef void (*CStopAudioDataMsg_Closure)
                 (const CStopAudioDataMsg *message,
                  void *closure_data);
typedef void (*CStartVideoDataMsg_Closure)
                 (const CStartVideoDataMsg *message,
                  void *closure_data);
typedef void (*CStopVideoDataMsg_Closure)
                 (const CStopVideoDataMsg *message,
                  void *closure_data);
typedef void (*CStartNeptuneDataMsg_Closure)
                 (const CStartNeptuneDataMsg *message,
                  void *closure_data);
typedef void (*CStopNeptuneDataMsg_Closure)
                 (const CStopNeptuneDataMsg *message,
                  void *closure_data);
typedef void (*CRecordedInput_Closure)
                 (const CRecordedInput *message,
                  void *closure_data);
typedef void (*CRecordedInputStream_Closure)
                 (const CRecordedInputStream *message,
                  void *closure_data);
typedef void (*CInputLatencyTestMsg_Closure)
                 (const CInputLatencyTestMsg *message,
                  void *closure_data);
typedef void (*CInputTouchFingerDownMsg_Closure)
                 (const CInputTouchFingerDownMsg *message,
                  void *closure_data);
typedef void (*CInputTouchFingerMotionMsg_Closure)
                 (const CInputTouchFingerMotionMsg *message,
                  void *closure_data);
typedef void (*CInputTouchFingerUpMsg_Closure)
                 (const CInputTouchFingerUpMsg *message,
                  void *closure_data);
typedef void (*CInputMouseMotionMsg_Closure)
                 (const CInputMouseMotionMsg *message,
                  void *closure_data);
typedef void (*CInputMouseWheelMsg_Closure)
                 (const CInputMouseWheelMsg *message,
                  void *closure_data);
typedef void (*CInputMouseDownMsg_Closure)
                 (const CInputMouseDownMsg *message,
                  void *closure_data);
typedef void (*CInputMouseUpMsg_Closure)
                 (const CInputMouseUpMsg *message,
                  void *closure_data);
typedef void (*CInputKeyDownMsg_Closure)
                 (const CInputKeyDownMsg *message,
                  void *closure_data);
typedef void (*CInputKeyUpMsg_Closure)
                 (const CInputKeyUpMsg *message,
                  void *closure_data);
typedef void (*CInputTextMsg_Closure)
                 (const CInputTextMsg *message,
                  void *closure_data);
typedef void (*CSetTitleMsg_Closure)
                 (const CSetTitleMsg *message,
                  void *closure_data);
typedef void (*CSetCaptureSizeMsg_Closure)
                 (const CSetCaptureSizeMsg *message,
                  void *closure_data);
typedef void (*CSetIconMsg_Closure)
                 (const CSetIconMsg *message,
                  void *closure_data);
typedef void (*CSetFlashStateMsg_Closure)
                 (const CSetFlashStateMsg *message,
                  void *closure_data);
typedef void (*CShowCursorMsg_Closure)
                 (const CShowCursorMsg *message,
                  void *closure_data);
typedef void (*CHideCursorMsg_Closure)
                 (const CHideCursorMsg *message,
                  void *closure_data);
typedef void (*CSetCursorMsg_Closure)
                 (const CSetCursorMsg *message,
                  void *closure_data);
typedef void (*CGetCursorImageMsg_Closure)
                 (const CGetCursorImageMsg *message,
                  void *closure_data);
typedef void (*CSetCursorImageMsg_Closure)
                 (const CSetCursorImageMsg *message,
                  void *closure_data);
typedef void (*CSetCursorScaleMsg_Closure)
                 (const CSetCursorScaleMsg *message,
                  void *closure_data);
typedef void (*CVideoDecoderInfoMsg_Closure)
                 (const CVideoDecoderInfoMsg *message,
                  void *closure_data);
typedef void (*CVideoEncoderInfoMsg_Closure)
                 (const CVideoEncoderInfoMsg *message,
                  void *closure_data);
typedef void (*CPauseMsg_Closure)
                 (const CPauseMsg *message,
                  void *closure_data);
typedef void (*CResumeMsg_Closure)
                 (const CResumeMsg *message,
                  void *closure_data);
typedef void (*CEnableHighResCaptureMsg_Closure)
                 (const CEnableHighResCaptureMsg *message,
                  void *closure_data);
typedef void (*CDisableHighResCaptureMsg_Closure)
                 (const CDisableHighResCaptureMsg *message,
                  void *closure_data);
typedef void (*CEnableNeptuneDataMsg_Closure)
                 (const CEnableNeptuneDataMsg *message,
                  void *closure_data);
typedef void (*CDisableNeptuneDataMsg_Closure)
                 (const CDisableNeptuneDataMsg *message,
                  void *closure_data);
typedef void (*CPauseControllerInputMsg_Closure)
                 (const CPauseControllerInputMsg *message,
                  void *closure_data);
typedef void (*CResumeControllerInputMsg_Closure)
                 (const CResumeControllerInputMsg *message,
                  void *closure_data);
typedef void (*CToggleMagnificationMsg_Closure)
                 (const CToggleMagnificationMsg *message,
                  void *closure_data);
typedef void (*CSetCapslockMsg_Closure)
                 (const CSetCapslockMsg *message,
                  void *closure_data);
typedef void (*CStreamingKeymapEntry_Closure)
                 (const CStreamingKeymapEntry *message,
                  void *closure_data);
typedef void (*CStreamingKeymap_Closure)
                 (const CStreamingKeymap *message,
                  void *closure_data);
typedef void (*CSetKeymapMsg_Closure)
                 (const CSetKeymapMsg *message,
                  void *closure_data);
typedef void (*CStopRequest_Closure)
                 (const CStopRequest *message,
                  void *closure_data);
typedef void (*CQuitRequest_Closure)
                 (const CQuitRequest *message,
                  void *closure_data);
typedef void (*CDeleteCursorMsg_Closure)
                 (const CDeleteCursorMsg *message,
                  void *closure_data);
typedef void (*CSetStreamingClientConfig_Closure)
                 (const CSetStreamingClientConfig *message,
                  void *closure_data);
typedef void (*CSetQoSMsg_Closure)
                 (const CSetQoSMsg *message,
                  void *closure_data);
typedef void (*CSetTargetFramerateMsg_Closure)
                 (const CSetTargetFramerateMsg *message,
                  void *closure_data);
typedef void (*CSetTargetBitrateMsg_Closure)
                 (const CSetTargetBitrateMsg *message,
                  void *closure_data);
typedef void (*COverlayEnabledMsg_Closure)
                 (const COverlayEnabledMsg *message,
                  void *closure_data);
typedef void (*CSetGammaRampMsg_Closure)
                 (const CSetGammaRampMsg *message,
                  void *closure_data);
typedef void (*CSetActivityMsg_Closure)
                 (const CSetActivityMsg *message,
                  void *closure_data);
typedef void (*CSystemSuspendMsg_Closure)
                 (const CSystemSuspendMsg *message,
                  void *closure_data);
typedef void (*CVirtualHereRequestMsg_Closure)
                 (const CVirtualHereRequestMsg *message,
                  void *closure_data);
typedef void (*CVirtualHereReadyMsg_Closure)
                 (const CVirtualHereReadyMsg *message,
                  void *closure_data);
typedef void (*CVirtualHereShareDeviceMsg_Closure)
                 (const CVirtualHereShareDeviceMsg *message,
                  void *closure_data);
typedef void (*CSetSpectatorModeMsg_Closure)
                 (const CSetSpectatorModeMsg *message,
                  void *closure_data);
typedef void (*CRemoteHIDMsg_Closure)
                 (const CRemoteHIDMsg *message,
                  void *closure_data);
typedef void (*CTouchConfigActiveMsg_Closure)
                 (const CTouchConfigActiveMsg *message,
                  void *closure_data);
typedef void (*CGetTouchConfigDataMsg_Closure)
                 (const CGetTouchConfigDataMsg *message,
                  void *closure_data);
typedef void (*CSetTouchConfigDataMsg_Closure)
                 (const CSetTouchConfigDataMsg *message,
                  void *closure_data);
typedef void (*CSaveTouchConfigLayoutMsg_Closure)
                 (const CSaveTouchConfigLayoutMsg *message,
                  void *closure_data);
typedef void (*CTouchActionSetActiveMsg_Closure)
                 (const CTouchActionSetActiveMsg *message,
                  void *closure_data);
typedef void (*CTouchActionSetLayerAddedMsg_Closure)
                 (const CTouchActionSetLayerAddedMsg *message,
                  void *closure_data);
typedef void (*CTouchActionSetLayerRemovedMsg_Closure)
                 (const CTouchActionSetLayerRemovedMsg *message,
                  void *closure_data);
typedef void (*CGetTouchIconDataMsg_Closure)
                 (const CGetTouchIconDataMsg *message,
                  void *closure_data);
typedef void (*CSetTouchIconDataMsg_Closure)
                 (const CSetTouchIconDataMsg *message,
                  void *closure_data);
typedef void (*CRemotePlayTogetherGroupUpdateMsg__Player_Closure)
                 (const CRemotePlayTogetherGroupUpdateMsg__Player *message,
                  void *closure_data);
typedef void (*CRemotePlayTogetherGroupUpdateMsg_Closure)
                 (const CRemotePlayTogetherGroupUpdateMsg *message,
                  void *closure_data);
typedef void (*CSetInputTemporarilyDisabledMsg_Closure)
                 (const CSetInputTemporarilyDisabledMsg *message,
                  void *closure_data);
typedef void (*CSetQualityOverrideMsg_Closure)
                 (const CSetQualityOverrideMsg *message,
                  void *closure_data);
typedef void (*CSetBitrateOverrideMsg_Closure)
                 (const CSetBitrateOverrideMsg *message,
                  void *closure_data);
typedef void (*CShowOnScreenKeyboardMsg_Closure)
                 (const CShowOnScreenKeyboardMsg *message,
                  void *closure_data);
typedef void (*CControllerPersonalizationUpdateMsg_Closure)
                 (const CControllerPersonalizationUpdateMsg *message,
                  void *closure_data);
typedef void (*CVRConnectionReady_Closure)
                 (const CVRConnectionReady *message,
                  void *closure_data);
typedef void (*CStreamDataLostMsg_Closure)
                 (const CStreamDataLostMsg *message,
                  void *closure_data);
typedef void (*CAudioFormat_Closure)
                 (const CAudioFormat *message,
                  void *closure_data);
typedef void (*CVideoFormat_Closure)
                 (const CVideoFormat *message,
                  void *closure_data);
typedef void (*CFrameEvent_Closure)
                 (const CFrameEvent *message,
                  void *closure_data);
typedef void (*CFrameStats_Closure)
                 (const CFrameStats *message,
                  void *closure_data);
typedef void (*CFrameStatAccumulatedValue_Closure)
                 (const CFrameStatAccumulatedValue *message,
                  void *closure_data);
typedef void (*CFrameStatsListMsg_Closure)
                 (const CFrameStatsListMsg *message,
                  void *closure_data);
typedef void (*CStreamingSessionStats_Closure)
                 (const CStreamingSessionStats *message,
                  void *closure_data);
typedef void (*CDebugDumpMsg_Closure)
                 (const CDebugDumpMsg *message,
                  void *closure_data);
typedef void (*CLogMsg_Closure)
                 (const CLogMsg *message,
                  void *closure_data);
typedef void (*CLogUploadMsg_Closure)
                 (const CLogUploadMsg *message,
                  void *closure_data);
typedef void (*CTransportSignalMsg__WebRTCMessage__Candidate_Closure)
                 (const CTransportSignalMsg__WebRTCMessage__Candidate *message,
                  void *closure_data);
typedef void (*CTransportSignalMsg__WebRTCMessage_Closure)
                 (const CTransportSignalMsg__WebRTCMessage *message,
                  void *closure_data);
typedef void (*CTransportSignalMsg_Closure)
                 (const CTransportSignalMsg *message,
                  void *closure_data);
typedef void (*CControllerConfigMsg__ControllerConfigResponse_Closure)
                 (const CControllerConfigMsg__ControllerConfigResponse *message,
                  void *closure_data);
typedef void (*CControllerConfigMsg__ControllerPersonalizationResponse_Closure)
                 (const CControllerConfigMsg__ControllerPersonalizationResponse *message,
                  void *closure_data);
typedef void (*CControllerConfigMsg__ControllerActiveConfigChangeResponse_Closure)
                 (const CControllerConfigMsg__ControllerActiveConfigChangeResponse *message,
                  void *closure_data);
typedef void (*CControllerConfigMsg__ControllerActiveConfigMsg_Closure)
                 (const CControllerConfigMsg__ControllerActiveConfigMsg *message,
                  void *closure_data);
typedef void (*CControllerConfigMsg_Closure)
                 (const CControllerConfigMsg *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    estream_channel__descriptor;
extern const ProtobufCEnumDescriptor    estream_discovery_message__descriptor;
extern const ProtobufCEnumDescriptor    estream_control_message__descriptor;
extern const ProtobufCEnumDescriptor    estream_version__descriptor;
extern const ProtobufCEnumDescriptor    estream_audio_codec__descriptor;
extern const ProtobufCEnumDescriptor    estream_video_codec__descriptor;
extern const ProtobufCEnumDescriptor    estream_quality_preference__descriptor;
extern const ProtobufCEnumDescriptor    estream_bitrate__descriptor;
extern const ProtobufCEnumDescriptor    estream_colorspace__descriptor;
extern const ProtobufCEnumDescriptor    estream_p2_pscope__descriptor;
extern const ProtobufCEnumDescriptor    estream_host_play_audio_preference__descriptor;
extern const ProtobufCEnumDescriptor    estreaming_data_type__descriptor;
extern const ProtobufCEnumDescriptor    estream_mouse_button__descriptor;
extern const ProtobufCEnumDescriptor    estream_mouse_wheel_direction__descriptor;
extern const ProtobufCEnumDescriptor    estream_framerate_limiter__descriptor;
extern const ProtobufCEnumDescriptor    estream_activity__descriptor;
extern const ProtobufCEnumDescriptor    estream_data_message__descriptor;
extern const ProtobufCEnumDescriptor    eaudio_format__descriptor;
extern const ProtobufCEnumDescriptor    evideo_format__descriptor;
extern const ProtobufCEnumDescriptor    estream_stats_message__descriptor;
extern const ProtobufCEnumDescriptor    estream_frame_event__descriptor;
extern const ProtobufCEnumDescriptor    estream_frame_result__descriptor;
extern const ProtobufCEnumDescriptor    eframe_accumulated_stat__descriptor;
extern const ProtobufCEnumDescriptor    elog_file_type__descriptor;
extern const ProtobufCEnumDescriptor    estream_controller_config_msg__descriptor;
extern const ProtobufCMessageDescriptor cdiscovery_ping_request__descriptor;
extern const ProtobufCMessageDescriptor cdiscovery_ping_response__descriptor;
extern const ProtobufCMessageDescriptor cstreaming_client_handshake_info__descriptor;
extern const ProtobufCMessageDescriptor cclient_handshake_msg__descriptor;
extern const ProtobufCMessageDescriptor cstreaming_server_handshake_info__descriptor;
extern const ProtobufCMessageDescriptor cserver_handshake_msg__descriptor;
extern const ProtobufCMessageDescriptor cauthentication_request_msg__descriptor;
extern const ProtobufCMessageDescriptor cauthentication_response_msg__descriptor;
extern const ProtobufCEnumDescriptor    cauthentication_response_msg__authentication_result__descriptor;
extern const ProtobufCMessageDescriptor ckeep_alive_msg__descriptor;
extern const ProtobufCMessageDescriptor cstart_network_test_msg__descriptor;
extern const ProtobufCMessageDescriptor cstream_video_mode__descriptor;
extern const ProtobufCMessageDescriptor cstream_video_limit__descriptor;
extern const ProtobufCMessageDescriptor cstreaming_client_caps__descriptor;
extern const ProtobufCMessageDescriptor cstreaming_client_config__descriptor;
extern const ProtobufCMessageDescriptor cstreaming_server_config__descriptor;
extern const ProtobufCMessageDescriptor cnegotiated_config__descriptor;
extern const ProtobufCMessageDescriptor cnegotiation_init_msg__descriptor;
extern const ProtobufCMessageDescriptor cnegotiation_set_config_msg__descriptor;
extern const ProtobufCMessageDescriptor cnegotiation_complete_msg__descriptor;
extern const ProtobufCMessageDescriptor cstart_audio_data_msg__descriptor;
extern const ProtobufCMessageDescriptor cstop_audio_data_msg__descriptor;
extern const ProtobufCMessageDescriptor cstart_video_data_msg__descriptor;
extern const ProtobufCMessageDescriptor cstop_video_data_msg__descriptor;
extern const ProtobufCMessageDescriptor cstart_neptune_data_msg__descriptor;
extern const ProtobufCMessageDescriptor cstop_neptune_data_msg__descriptor;
extern const ProtobufCMessageDescriptor crecorded_input__descriptor;
extern const ProtobufCMessageDescriptor crecorded_input_stream__descriptor;
extern const ProtobufCMessageDescriptor cinput_latency_test_msg__descriptor;
extern const ProtobufCMessageDescriptor cinput_touch_finger_down_msg__descriptor;
extern const ProtobufCMessageDescriptor cinput_touch_finger_motion_msg__descriptor;
extern const ProtobufCMessageDescriptor cinput_touch_finger_up_msg__descriptor;
extern const ProtobufCMessageDescriptor cinput_mouse_motion_msg__descriptor;
extern const ProtobufCMessageDescriptor cinput_mouse_wheel_msg__descriptor;
extern const ProtobufCMessageDescriptor cinput_mouse_down_msg__descriptor;
extern const ProtobufCMessageDescriptor cinput_mouse_up_msg__descriptor;
extern const ProtobufCMessageDescriptor cinput_key_down_msg__descriptor;
extern const ProtobufCMessageDescriptor cinput_key_up_msg__descriptor;
extern const ProtobufCMessageDescriptor cinput_text_msg__descriptor;
extern const ProtobufCMessageDescriptor cset_title_msg__descriptor;
extern const ProtobufCMessageDescriptor cset_capture_size_msg__descriptor;
extern const ProtobufCMessageDescriptor cset_icon_msg__descriptor;
extern const ProtobufCMessageDescriptor cset_flash_state_msg__descriptor;
extern const ProtobufCMessageDescriptor cshow_cursor_msg__descriptor;
extern const ProtobufCMessageDescriptor chide_cursor_msg__descriptor;
extern const ProtobufCMessageDescriptor cset_cursor_msg__descriptor;
extern const ProtobufCMessageDescriptor cget_cursor_image_msg__descriptor;
extern const ProtobufCMessageDescriptor cset_cursor_image_msg__descriptor;
extern const ProtobufCMessageDescriptor cset_cursor_scale_msg__descriptor;
extern const ProtobufCMessageDescriptor cvideo_decoder_info_msg__descriptor;
extern const ProtobufCMessageDescriptor cvideo_encoder_info_msg__descriptor;
extern const ProtobufCMessageDescriptor cpause_msg__descriptor;
extern const ProtobufCMessageDescriptor cresume_msg__descriptor;
extern const ProtobufCMessageDescriptor cenable_high_res_capture_msg__descriptor;
extern const ProtobufCMessageDescriptor cdisable_high_res_capture_msg__descriptor;
extern const ProtobufCMessageDescriptor cenable_neptune_data_msg__descriptor;
extern const ProtobufCMessageDescriptor cdisable_neptune_data_msg__descriptor;
extern const ProtobufCMessageDescriptor cpause_controller_input_msg__descriptor;
extern const ProtobufCMessageDescriptor cresume_controller_input_msg__descriptor;
extern const ProtobufCMessageDescriptor ctoggle_magnification_msg__descriptor;
extern const ProtobufCMessageDescriptor cset_capslock_msg__descriptor;
extern const ProtobufCMessageDescriptor cstreaming_keymap_entry__descriptor;
extern const ProtobufCMessageDescriptor cstreaming_keymap__descriptor;
extern const ProtobufCMessageDescriptor cset_keymap_msg__descriptor;
extern const ProtobufCMessageDescriptor cstop_request__descriptor;
extern const ProtobufCMessageDescriptor cquit_request__descriptor;
extern const ProtobufCMessageDescriptor cdelete_cursor_msg__descriptor;
extern const ProtobufCMessageDescriptor cset_streaming_client_config__descriptor;
extern const ProtobufCMessageDescriptor cset_qo_smsg__descriptor;
extern const ProtobufCMessageDescriptor cset_target_framerate_msg__descriptor;
extern const ProtobufCMessageDescriptor cset_target_bitrate_msg__descriptor;
extern const ProtobufCMessageDescriptor coverlay_enabled_msg__descriptor;
extern const ProtobufCMessageDescriptor cset_gamma_ramp_msg__descriptor;
extern const ProtobufCMessageDescriptor cset_activity_msg__descriptor;
extern const ProtobufCMessageDescriptor csystem_suspend_msg__descriptor;
extern const ProtobufCMessageDescriptor cvirtual_here_request_msg__descriptor;
extern const ProtobufCMessageDescriptor cvirtual_here_ready_msg__descriptor;
extern const ProtobufCMessageDescriptor cvirtual_here_share_device_msg__descriptor;
extern const ProtobufCMessageDescriptor cset_spectator_mode_msg__descriptor;
extern const ProtobufCMessageDescriptor cremote_hidmsg__descriptor;
extern const ProtobufCMessageDescriptor ctouch_config_active_msg__descriptor;
extern const ProtobufCMessageDescriptor cget_touch_config_data_msg__descriptor;
extern const ProtobufCMessageDescriptor cset_touch_config_data_msg__descriptor;
extern const ProtobufCMessageDescriptor csave_touch_config_layout_msg__descriptor;
extern const ProtobufCMessageDescriptor ctouch_action_set_active_msg__descriptor;
extern const ProtobufCMessageDescriptor ctouch_action_set_layer_added_msg__descriptor;
extern const ProtobufCMessageDescriptor ctouch_action_set_layer_removed_msg__descriptor;
extern const ProtobufCMessageDescriptor cget_touch_icon_data_msg__descriptor;
extern const ProtobufCMessageDescriptor cset_touch_icon_data_msg__descriptor;
extern const ProtobufCMessageDescriptor cremote_play_together_group_update_msg__descriptor;
extern const ProtobufCMessageDescriptor cremote_play_together_group_update_msg__player__descriptor;
extern const ProtobufCMessageDescriptor cset_input_temporarily_disabled_msg__descriptor;
extern const ProtobufCMessageDescriptor cset_quality_override_msg__descriptor;
extern const ProtobufCMessageDescriptor cset_bitrate_override_msg__descriptor;
extern const ProtobufCMessageDescriptor cshow_on_screen_keyboard_msg__descriptor;
extern const ProtobufCMessageDescriptor ccontroller_personalization_update_msg__descriptor;
extern const ProtobufCMessageDescriptor cvrconnection_ready__descriptor;
extern const ProtobufCMessageDescriptor cstream_data_lost_msg__descriptor;
extern const ProtobufCMessageDescriptor caudio_format__descriptor;
extern const ProtobufCMessageDescriptor cvideo_format__descriptor;
extern const ProtobufCMessageDescriptor cframe_event__descriptor;
extern const ProtobufCMessageDescriptor cframe_stats__descriptor;
extern const ProtobufCMessageDescriptor cframe_stat_accumulated_value__descriptor;
extern const ProtobufCMessageDescriptor cframe_stats_list_msg__descriptor;
extern const ProtobufCMessageDescriptor cstreaming_session_stats__descriptor;
extern const ProtobufCMessageDescriptor cdebug_dump_msg__descriptor;
extern const ProtobufCMessageDescriptor clog_msg__descriptor;
extern const ProtobufCMessageDescriptor clog_upload_msg__descriptor;
extern const ProtobufCMessageDescriptor ctransport_signal_msg__descriptor;
extern const ProtobufCMessageDescriptor ctransport_signal_msg__web_rtcmessage__descriptor;
extern const ProtobufCMessageDescriptor ctransport_signal_msg__web_rtcmessage__candidate__descriptor;
extern const ProtobufCMessageDescriptor ccontroller_config_msg__descriptor;
extern const ProtobufCMessageDescriptor ccontroller_config_msg__controller_config_response__descriptor;
extern const ProtobufCMessageDescriptor ccontroller_config_msg__controller_personalization_response__descriptor;
extern const ProtobufCMessageDescriptor ccontroller_config_msg__controller_active_config_change_response__descriptor;
extern const ProtobufCMessageDescriptor ccontroller_config_msg__controller_active_config_msg__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_protobuf_2fremoteplay_2eproto__INCLUDED */
